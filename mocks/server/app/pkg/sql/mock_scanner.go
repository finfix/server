// Code generated by mockery v2.42.2. DO NOT EDIT.

package sql

import mock "github.com/stretchr/testify/mock"

// Mockscanner is an autogenerated mock type for the scanner type
type Mockscanner struct {
	mock.Mock
}

type Mockscanner_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockscanner) EXPECT() *Mockscanner_Expecter {
	return &Mockscanner_Expecter{mock: &_m.Mock}
}

// MapScan provides a mock function with given fields: dest
func (_m *Mockscanner) MapScan(dest map[string]interface{}) error {
	ret := _m.Called(dest)

	if len(ret) == 0 {
		panic("no return value specified for MapScan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockscanner_MapScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapScan'
type Mockscanner_MapScan_Call struct {
	*mock.Call
}

// MapScan is a helper method to define mock.On call
//   - dest map[string]interface{}
func (_e *Mockscanner_Expecter) MapScan(dest interface{}) *Mockscanner_MapScan_Call {
	return &Mockscanner_MapScan_Call{Call: _e.mock.On("MapScan", dest)}
}

func (_c *Mockscanner_MapScan_Call) Run(run func(dest map[string]interface{})) *Mockscanner_MapScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *Mockscanner_MapScan_Call) Return(_a0 error) *Mockscanner_MapScan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockscanner_MapScan_Call) RunAndReturn(run func(map[string]interface{}) error) *Mockscanner_MapScan_Call {
	_c.Call.Return(run)
	return _c
}

// SliceScan provides a mock function with given fields:
func (_m *Mockscanner) SliceScan() ([]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SliceScan")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockscanner_SliceScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SliceScan'
type Mockscanner_SliceScan_Call struct {
	*mock.Call
}

// SliceScan is a helper method to define mock.On call
func (_e *Mockscanner_Expecter) SliceScan() *Mockscanner_SliceScan_Call {
	return &Mockscanner_SliceScan_Call{Call: _e.mock.On("SliceScan")}
}

func (_c *Mockscanner_SliceScan_Call) Run(run func()) *Mockscanner_SliceScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockscanner_SliceScan_Call) Return(_a0 []interface{}, _a1 error) *Mockscanner_SliceScan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockscanner_SliceScan_Call) RunAndReturn(run func() ([]interface{}, error)) *Mockscanner_SliceScan_Call {
	_c.Call.Return(run)
	return _c
}

// StructScan provides a mock function with given fields: dest
func (_m *Mockscanner) StructScan(dest interface{}) error {
	ret := _m.Called(dest)

	if len(ret) == 0 {
		panic("no return value specified for StructScan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockscanner_StructScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StructScan'
type Mockscanner_StructScan_Call struct {
	*mock.Call
}

// StructScan is a helper method to define mock.On call
//   - dest interface{}
func (_e *Mockscanner_Expecter) StructScan(dest interface{}) *Mockscanner_StructScan_Call {
	return &Mockscanner_StructScan_Call{Call: _e.mock.On("StructScan", dest)}
}

func (_c *Mockscanner_StructScan_Call) Run(run func(dest interface{})) *Mockscanner_StructScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Mockscanner_StructScan_Call) Return(_a0 error) *Mockscanner_StructScan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockscanner_StructScan_Call) RunAndReturn(run func(interface{}) error) *Mockscanner_StructScan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockscanner creates a new instance of Mockscanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockscanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockscanner {
	mock := &Mockscanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

package sql

import (
	context "context"
	sql "server/app/pkg/sql"

	mock "github.com/stretchr/testify/mock"
)

// MockStmtInterface is an autogenerated mock type for the StmtInterface type
type MockStmtInterface struct {
	mock.Mock
}

type MockStmtInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStmtInterface) EXPECT() *MockStmtInterface_Expecter {
	return &MockStmtInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockStmtInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStmtInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStmtInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStmtInterface_Expecter) Close() *MockStmtInterface_Close_Call {
	return &MockStmtInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStmtInterface_Close_Call) Run(run func()) *MockStmtInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStmtInterface_Close_Call) Return(_a0 error) *MockStmtInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStmtInterface_Close_Call) RunAndReturn(run func() error) *MockStmtInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ExecWithAffectedRows provides a mock function with given fields: ctx, args
func (_m *MockStmtInterface) ExecWithAffectedRows(ctx context.Context, args ...interface{}) (uint32, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecWithAffectedRows")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (uint32, error)); ok {
		return rf(ctx, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) uint32); ok {
		r0 = rf(ctx, args...)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStmtInterface_ExecWithAffectedRows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecWithAffectedRows'
type MockStmtInterface_ExecWithAffectedRows_Call struct {
	*mock.Call
}

// ExecWithAffectedRows is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...interface{}
func (_e *MockStmtInterface_Expecter) ExecWithAffectedRows(ctx interface{}, args ...interface{}) *MockStmtInterface_ExecWithAffectedRows_Call {
	return &MockStmtInterface_ExecWithAffectedRows_Call{Call: _e.mock.On("ExecWithAffectedRows",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *MockStmtInterface_ExecWithAffectedRows_Call) Run(run func(ctx context.Context, args ...interface{})) *MockStmtInterface_ExecWithAffectedRows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockStmtInterface_ExecWithAffectedRows_Call) Return(_a0 uint32, _a1 error) *MockStmtInterface_ExecWithAffectedRows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStmtInterface_ExecWithAffectedRows_Call) RunAndReturn(run func(context.Context, ...interface{}) (uint32, error)) *MockStmtInterface_ExecWithAffectedRows_Call {
	_c.Call.Return(run)
	return _c
}

// ExecWithLastInsertID provides a mock function with given fields: ctx, args
func (_m *MockStmtInterface) ExecWithLastInsertID(ctx context.Context, args ...interface{}) (uint32, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecWithLastInsertID")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (uint32, error)); ok {
		return rf(ctx, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) uint32); ok {
		r0 = rf(ctx, args...)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStmtInterface_ExecWithLastInsertID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecWithLastInsertID'
type MockStmtInterface_ExecWithLastInsertID_Call struct {
	*mock.Call
}

// ExecWithLastInsertID is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...interface{}
func (_e *MockStmtInterface_Expecter) ExecWithLastInsertID(ctx interface{}, args ...interface{}) *MockStmtInterface_ExecWithLastInsertID_Call {
	return &MockStmtInterface_ExecWithLastInsertID_Call{Call: _e.mock.On("ExecWithLastInsertID",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *MockStmtInterface_ExecWithLastInsertID_Call) Run(run func(ctx context.Context, args ...interface{})) *MockStmtInterface_ExecWithLastInsertID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockStmtInterface_ExecWithLastInsertID_Call) Return(_a0 uint32, _a1 error) *MockStmtInterface_ExecWithLastInsertID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStmtInterface_ExecWithLastInsertID_Call) RunAndReturn(run func(context.Context, ...interface{}) (uint32, error)) *MockStmtInterface_ExecWithLastInsertID_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, dest, args
func (_m *MockStmtInterface) Get(ctx context.Context, dest interface{}, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...interface{}) error); ok {
		r0 = rf(ctx, dest, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStmtInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStmtInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - dest interface{}
//   - args ...interface{}
func (_e *MockStmtInterface_Expecter) Get(ctx interface{}, dest interface{}, args ...interface{}) *MockStmtInterface_Get_Call {
	return &MockStmtInterface_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, dest}, args...)...)}
}

func (_c *MockStmtInterface_Get_Call) Run(run func(ctx context.Context, dest interface{}, args ...interface{})) *MockStmtInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockStmtInterface_Get_Call) Return(_a0 error) *MockStmtInterface_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStmtInterface_Get_Call) RunAndReturn(run func(context.Context, interface{}, ...interface{}) error) *MockStmtInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, args
func (_m *MockStmtInterface) Query(ctx context.Context, args ...interface{}) (sql.RowsInterface, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 sql.RowsInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (sql.RowsInterface, error)); ok {
		return rf(ctx, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) sql.RowsInterface); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.RowsInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStmtInterface_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockStmtInterface_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...interface{}
func (_e *MockStmtInterface_Expecter) Query(ctx interface{}, args ...interface{}) *MockStmtInterface_Query_Call {
	return &MockStmtInterface_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *MockStmtInterface_Query_Call) Run(run func(ctx context.Context, args ...interface{})) *MockStmtInterface_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockStmtInterface_Query_Call) Return(_a0 sql.RowsInterface, _a1 error) *MockStmtInterface_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStmtInterface_Query_Call) RunAndReturn(run func(context.Context, ...interface{}) (sql.RowsInterface, error)) *MockStmtInterface_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: ctx, args
func (_m *MockStmtInterface) QueryRow(ctx context.Context, args ...interface{}) sql.RowInterface {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 sql.RowInterface
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) sql.RowInterface); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.RowInterface)
		}
	}

	return r0
}

// MockStmtInterface_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockStmtInterface_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - args ...interface{}
func (_e *MockStmtInterface_Expecter) QueryRow(ctx interface{}, args ...interface{}) *MockStmtInterface_QueryRow_Call {
	return &MockStmtInterface_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx}, args...)...)}
}

func (_c *MockStmtInterface_QueryRow_Call) Run(run func(ctx context.Context, args ...interface{})) *MockStmtInterface_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockStmtInterface_QueryRow_Call) Return(_a0 sql.RowInterface) *MockStmtInterface_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStmtInterface_QueryRow_Call) RunAndReturn(run func(context.Context, ...interface{}) sql.RowInterface) *MockStmtInterface_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: ctx, dest, args
func (_m *MockStmtInterface) Select(ctx context.Context, dest interface{}, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...interface{}) error); ok {
		r0 = rf(ctx, dest, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStmtInterface_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type MockStmtInterface_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - ctx context.Context
//   - dest interface{}
//   - args ...interface{}
func (_e *MockStmtInterface_Expecter) Select(ctx interface{}, dest interface{}, args ...interface{}) *MockStmtInterface_Select_Call {
	return &MockStmtInterface_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{ctx, dest}, args...)...)}
}

func (_c *MockStmtInterface_Select_Call) Run(run func(ctx context.Context, dest interface{}, args ...interface{})) *MockStmtInterface_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockStmtInterface_Select_Call) Return(_a0 error) *MockStmtInterface_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStmtInterface_Select_Call) RunAndReturn(run func(context.Context, interface{}, ...interface{}) error) *MockStmtInterface_Select_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStmtInterface creates a new instance of MockStmtInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStmtInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStmtInterface {
	mock := &MockStmtInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

package middleware

import (
	services "server/app/services"

	mock "github.com/stretchr/testify/mock"
)

// MockDecodable is an autogenerated mock type for the Decodable type
type MockDecodable struct {
	mock.Mock
}

type MockDecodable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDecodable) EXPECT() *MockDecodable_Expecter {
	return &MockDecodable_Expecter{mock: &_m.Mock}
}

// SetNecessary provides a mock function with given fields: _a0
func (_m *MockDecodable) SetNecessary(_a0 services.NecessaryUserInformation) interface{} {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetNecessary")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(services.NecessaryUserInformation) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockDecodable_SetNecessary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNecessary'
type MockDecodable_SetNecessary_Call struct {
	*mock.Call
}

// SetNecessary is a helper method to define mock.On call
//   - _a0 services.NecessaryUserInformation
func (_e *MockDecodable_Expecter) SetNecessary(_a0 interface{}) *MockDecodable_SetNecessary_Call {
	return &MockDecodable_SetNecessary_Call{Call: _e.mock.On("SetNecessary", _a0)}
}

func (_c *MockDecodable_SetNecessary_Call) Run(run func(_a0 services.NecessaryUserInformation)) *MockDecodable_SetNecessary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.NecessaryUserInformation))
	})
	return _c
}

func (_c *MockDecodable_SetNecessary_Call) Return(_a0 interface{}) *MockDecodable_SetNecessary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDecodable_SetNecessary_Call) RunAndReturn(run func(services.NecessaryUserInformation) interface{}) *MockDecodable_SetNecessary_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields:
func (_m *MockDecodable) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDecodable_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockDecodable_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *MockDecodable_Expecter) Validate() *MockDecodable_Validate_Call {
	return &MockDecodable_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *MockDecodable_Validate_Call) Run(run func()) *MockDecodable_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDecodable_Validate_Call) Return(_a0 error) *MockDecodable_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDecodable_Validate_Call) RunAndReturn(run func() error) *MockDecodable_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDecodable creates a new instance of MockDecodable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDecodable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDecodable {
	mock := &MockDecodable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

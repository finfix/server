// Code generated by mockery v2.42.2. DO NOT EDIT.

package server

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockLoggingRequestFunc is an autogenerated mock type for the LoggingRequestFunc type
type MockLoggingRequestFunc struct {
	mock.Mock
}

type MockLoggingRequestFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoggingRequestFunc) EXPECT() *MockLoggingRequestFunc_Expecter {
	return &MockLoggingRequestFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockLoggingRequestFunc) Execute(_a0 *http.Request) {
	_m.Called(_a0)
}

// MockLoggingRequestFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockLoggingRequestFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *http.Request
func (_e *MockLoggingRequestFunc_Expecter) Execute(_a0 interface{}) *MockLoggingRequestFunc_Execute_Call {
	return &MockLoggingRequestFunc_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockLoggingRequestFunc_Execute_Call) Run(run func(_a0 *http.Request)) *MockLoggingRequestFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockLoggingRequestFunc_Execute_Call) Return() *MockLoggingRequestFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggingRequestFunc_Execute_Call) RunAndReturn(run func(*http.Request)) *MockLoggingRequestFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoggingRequestFunc creates a new instance of MockLoggingRequestFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoggingRequestFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoggingRequestFunc {
	mock := &MockLoggingRequestFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

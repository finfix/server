// Code generated by mockery v2.42.2. DO NOT EDIT.

package chain

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockAfterFunc is an autogenerated mock type for the AfterFunc type
type MockAfterFunc struct {
	mock.Mock
}

type MockAfterFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAfterFunc) EXPECT() *MockAfterFunc_Expecter {
	return &MockAfterFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MockAfterFunc) Execute(_a0 context.Context, _a1 http.ResponseWriter) context.Context {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter) context.Context); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockAfterFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockAfterFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 http.ResponseWriter
func (_e *MockAfterFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}) *MockAfterFunc_Execute_Call {
	return &MockAfterFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *MockAfterFunc_Execute_Call) Run(run func(_a0 context.Context, _a1 http.ResponseWriter)) *MockAfterFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockAfterFunc_Execute_Call) Return(_a0 context.Context) *MockAfterFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAfterFunc_Execute_Call) RunAndReturn(run func(context.Context, http.ResponseWriter) context.Context) *MockAfterFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAfterFunc creates a new instance of MockAfterFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAfterFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAfterFunc {
	mock := &MockAfterFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

package chain

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockEncodeResponseFunc is an autogenerated mock type for the EncodeResponseFunc type
type MockEncodeResponseFunc struct {
	mock.Mock
}

type MockEncodeResponseFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncodeResponseFunc) EXPECT() *MockEncodeResponseFunc_Expecter {
	return &MockEncodeResponseFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEncodeResponseFunc) Execute(_a0 context.Context, _a1 http.ResponseWriter, _a2 interface{}) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter, interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEncodeResponseFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockEncodeResponseFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 http.ResponseWriter
//   - _a2 interface{}
func (_e *MockEncodeResponseFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockEncodeResponseFunc_Execute_Call {
	return &MockEncodeResponseFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2)}
}

func (_c *MockEncodeResponseFunc_Execute_Call) Run(run func(_a0 context.Context, _a1 http.ResponseWriter, _a2 interface{})) *MockEncodeResponseFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(http.ResponseWriter), args[2].(interface{}))
	})
	return _c
}

func (_c *MockEncodeResponseFunc_Execute_Call) Return(_a0 error) *MockEncodeResponseFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncodeResponseFunc_Execute_Call) RunAndReturn(run func(context.Context, http.ResponseWriter, interface{}) error) *MockEncodeResponseFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncodeResponseFunc creates a new instance of MockEncodeResponseFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncodeResponseFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncodeResponseFunc {
	mock := &MockEncodeResponseFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

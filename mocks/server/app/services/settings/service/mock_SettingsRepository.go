// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	model "server/app/services/settings/model"

	mock "github.com/stretchr/testify/mock"
)

// MockSettingsRepository is an autogenerated mock type for the SettingsRepository type
type MockSettingsRepository struct {
	mock.Mock
}

type MockSettingsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSettingsRepository) EXPECT() *MockSettingsRepository_Expecter {
	return &MockSettingsRepository_Expecter{mock: &_m.Mock}
}

// GetCurrencies provides a mock function with given fields: _a0
func (_m *MockSettingsRepository) GetCurrencies(_a0 context.Context) ([]model.Currency, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencies")
	}

	var r0 []model.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Currency, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Currency); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingsRepository_GetCurrencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrencies'
type MockSettingsRepository_GetCurrencies_Call struct {
	*mock.Call
}

// GetCurrencies is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockSettingsRepository_Expecter) GetCurrencies(_a0 interface{}) *MockSettingsRepository_GetCurrencies_Call {
	return &MockSettingsRepository_GetCurrencies_Call{Call: _e.mock.On("GetCurrencies", _a0)}
}

func (_c *MockSettingsRepository_GetCurrencies_Call) Run(run func(_a0 context.Context)) *MockSettingsRepository_GetCurrencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSettingsRepository_GetCurrencies_Call) Return(_a0 []model.Currency, _a1 error) *MockSettingsRepository_GetCurrencies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingsRepository_GetCurrencies_Call) RunAndReturn(run func(context.Context) ([]model.Currency, error)) *MockSettingsRepository_GetCurrencies_Call {
	_c.Call.Return(run)
	return _c
}

// GetIcons provides a mock function with given fields: _a0
func (_m *MockSettingsRepository) GetIcons(_a0 context.Context) ([]model.Icon, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIcons")
	}

	var r0 []model.Icon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Icon, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Icon); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Icon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSettingsRepository_GetIcons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIcons'
type MockSettingsRepository_GetIcons_Call struct {
	*mock.Call
}

// GetIcons is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockSettingsRepository_Expecter) GetIcons(_a0 interface{}) *MockSettingsRepository_GetIcons_Call {
	return &MockSettingsRepository_GetIcons_Call{Call: _e.mock.On("GetIcons", _a0)}
}

func (_c *MockSettingsRepository_GetIcons_Call) Run(run func(_a0 context.Context)) *MockSettingsRepository_GetIcons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSettingsRepository_GetIcons_Call) Return(_a0 []model.Icon, _a1 error) *MockSettingsRepository_GetIcons_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSettingsRepository_GetIcons_Call) RunAndReturn(run func(context.Context) ([]model.Icon, error)) *MockSettingsRepository_GetIcons_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCurrencies provides a mock function with given fields: ctx, rates
func (_m *MockSettingsRepository) UpdateCurrencies(ctx context.Context, rates map[string]float64) error {
	ret := _m.Called(ctx, rates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCurrencies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]float64) error); ok {
		r0 = rf(ctx, rates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSettingsRepository_UpdateCurrencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCurrencies'
type MockSettingsRepository_UpdateCurrencies_Call struct {
	*mock.Call
}

// UpdateCurrencies is a helper method to define mock.On call
//   - ctx context.Context
//   - rates map[string]float64
func (_e *MockSettingsRepository_Expecter) UpdateCurrencies(ctx interface{}, rates interface{}) *MockSettingsRepository_UpdateCurrencies_Call {
	return &MockSettingsRepository_UpdateCurrencies_Call{Call: _e.mock.On("UpdateCurrencies", ctx, rates)}
}

func (_c *MockSettingsRepository_UpdateCurrencies_Call) Run(run func(ctx context.Context, rates map[string]float64)) *MockSettingsRepository_UpdateCurrencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]float64))
	})
	return _c
}

func (_c *MockSettingsRepository_UpdateCurrencies_Call) Return(_a0 error) *MockSettingsRepository_UpdateCurrencies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSettingsRepository_UpdateCurrencies_Call) RunAndReturn(run func(context.Context, map[string]float64) error) *MockSettingsRepository_UpdateCurrencies_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSettingsRepository creates a new instance of MockSettingsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSettingsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSettingsRepository {
	mock := &MockSettingsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

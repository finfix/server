// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	model "server/app/services/user/model"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// GetUsers provides a mock function with given fields: ctx, filters
func (_m *MockUserService) GetUsers(ctx context.Context, filters model.GetReq) ([]model.User, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetReq) ([]model.User, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetReq) []model.User); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetReq) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockUserService_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - filters model.GetReq
func (_e *MockUserService_Expecter) GetUsers(ctx interface{}, filters interface{}) *MockUserService_GetUsers_Call {
	return &MockUserService_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, filters)}
}

func (_c *MockUserService_GetUsers_Call) Run(run func(ctx context.Context, filters model.GetReq)) *MockUserService_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GetReq))
	})
	return _c
}

func (_c *MockUserService_GetUsers_Call) Return(users []model.User, err error) *MockUserService_GetUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserService_GetUsers_Call) RunAndReturn(run func(context.Context, model.GetReq) ([]model.User, error)) *MockUserService_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SendNotification provides a mock function with given fields: ctx, userID, push
func (_m *MockUserService) SendNotification(ctx context.Context, userID uint32, push model.Notification) (uint8, error) {
	ret := _m.Called(ctx, userID, push)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, model.Notification) (uint8, error)); ok {
		return rf(ctx, userID, push)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, model.Notification) uint8); ok {
		r0 = rf(ctx, userID, push)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, model.Notification) error); ok {
		r1 = rf(ctx, userID, push)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_SendNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotification'
type MockUserService_SendNotification_Call struct {
	*mock.Call
}

// SendNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint32
//   - push model.Notification
func (_e *MockUserService_Expecter) SendNotification(ctx interface{}, userID interface{}, push interface{}) *MockUserService_SendNotification_Call {
	return &MockUserService_SendNotification_Call{Call: _e.mock.On("SendNotification", ctx, userID, push)}
}

func (_c *MockUserService_SendNotification_Call) Run(run func(ctx context.Context, userID uint32, push model.Notification)) *MockUserService_SendNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(model.Notification))
	})
	return _c
}

func (_c *MockUserService_SendNotification_Call) Return(_a0 uint8, _a1 error) *MockUserService_SendNotification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_SendNotification_Call) RunAndReturn(run func(context.Context, uint32, model.Notification) (uint8, error)) *MockUserService_SendNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

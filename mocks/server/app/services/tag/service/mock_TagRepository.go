// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	model "server/app/services/tag/repository/model"

	mock "github.com/stretchr/testify/mock"

	tagmodel "server/app/services/tag/model"
)

// MockTagRepository is an autogenerated mock type for the TagRepository type
type MockTagRepository struct {
	mock.Mock
}

type MockTagRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagRepository) EXPECT() *MockTagRepository_Expecter {
	return &MockTagRepository_Expecter{mock: &_m.Mock}
}

// CreateTag provides a mock function with given fields: _a0, _a1
func (_m *MockTagRepository) CreateTag(_a0 context.Context, _a1 model.CreateTagReq) (uint32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateTagReq) (uint32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateTagReq) uint32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateTagReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagRepository_CreateTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTag'
type MockTagRepository_CreateTag_Call struct {
	*mock.Call
}

// CreateTag is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.CreateTagReq
func (_e *MockTagRepository_Expecter) CreateTag(_a0 interface{}, _a1 interface{}) *MockTagRepository_CreateTag_Call {
	return &MockTagRepository_CreateTag_Call{Call: _e.mock.On("CreateTag", _a0, _a1)}
}

func (_c *MockTagRepository_CreateTag_Call) Run(run func(_a0 context.Context, _a1 model.CreateTagReq)) *MockTagRepository_CreateTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateTagReq))
	})
	return _c
}

func (_c *MockTagRepository_CreateTag_Call) Return(_a0 uint32, _a1 error) *MockTagRepository_CreateTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagRepository_CreateTag_Call) RunAndReturn(run func(context.Context, model.CreateTagReq) (uint32, error)) *MockTagRepository_CreateTag_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTag provides a mock function with given fields: ctx, id, userID
func (_m *MockTagRepository) DeleteTag(ctx context.Context, id uint32, userID uint32) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagRepository_DeleteTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTag'
type MockTagRepository_DeleteTag_Call struct {
	*mock.Call
}

// DeleteTag is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint32
//   - userID uint32
func (_e *MockTagRepository_Expecter) DeleteTag(ctx interface{}, id interface{}, userID interface{}) *MockTagRepository_DeleteTag_Call {
	return &MockTagRepository_DeleteTag_Call{Call: _e.mock.On("DeleteTag", ctx, id, userID)}
}

func (_c *MockTagRepository_DeleteTag_Call) Run(run func(ctx context.Context, id uint32, userID uint32)) *MockTagRepository_DeleteTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(uint32))
	})
	return _c
}

func (_c *MockTagRepository_DeleteTag_Call) Return(_a0 error) *MockTagRepository_DeleteTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagRepository_DeleteTag_Call) RunAndReturn(run func(context.Context, uint32, uint32) error) *MockTagRepository_DeleteTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function with given fields: _a0, _a1
func (_m *MockTagRepository) GetTags(_a0 context.Context, _a1 tagmodel.GetTagsReq) ([]tagmodel.Tag, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []tagmodel.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tagmodel.GetTagsReq) ([]tagmodel.Tag, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tagmodel.GetTagsReq) []tagmodel.Tag); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tagmodel.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tagmodel.GetTagsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagRepository_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockTagRepository_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 tagmodel.GetTagsReq
func (_e *MockTagRepository_Expecter) GetTags(_a0 interface{}, _a1 interface{}) *MockTagRepository_GetTags_Call {
	return &MockTagRepository_GetTags_Call{Call: _e.mock.On("GetTags", _a0, _a1)}
}

func (_c *MockTagRepository_GetTags_Call) Run(run func(_a0 context.Context, _a1 tagmodel.GetTagsReq)) *MockTagRepository_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tagmodel.GetTagsReq))
	})
	return _c
}

func (_c *MockTagRepository_GetTags_Call) Return(res []tagmodel.Tag, err error) *MockTagRepository_GetTags_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockTagRepository_GetTags_Call) RunAndReturn(run func(context.Context, tagmodel.GetTagsReq) ([]tagmodel.Tag, error)) *MockTagRepository_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsToTransactions provides a mock function with given fields: ctx, req
func (_m *MockTagRepository) GetTagsToTransactions(ctx context.Context, req tagmodel.GetTagsToTransactionsReq) ([]tagmodel.TagToTransaction, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsToTransactions")
	}

	var r0 []tagmodel.TagToTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tagmodel.GetTagsToTransactionsReq) ([]tagmodel.TagToTransaction, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tagmodel.GetTagsToTransactionsReq) []tagmodel.TagToTransaction); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tagmodel.TagToTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tagmodel.GetTagsToTransactionsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagRepository_GetTagsToTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsToTransactions'
type MockTagRepository_GetTagsToTransactions_Call struct {
	*mock.Call
}

// GetTagsToTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - req tagmodel.GetTagsToTransactionsReq
func (_e *MockTagRepository_Expecter) GetTagsToTransactions(ctx interface{}, req interface{}) *MockTagRepository_GetTagsToTransactions_Call {
	return &MockTagRepository_GetTagsToTransactions_Call{Call: _e.mock.On("GetTagsToTransactions", ctx, req)}
}

func (_c *MockTagRepository_GetTagsToTransactions_Call) Run(run func(ctx context.Context, req tagmodel.GetTagsToTransactionsReq)) *MockTagRepository_GetTagsToTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tagmodel.GetTagsToTransactionsReq))
	})
	return _c
}

func (_c *MockTagRepository_GetTagsToTransactions_Call) Return(_a0 []tagmodel.TagToTransaction, _a1 error) *MockTagRepository_GetTagsToTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagRepository_GetTagsToTransactions_Call) RunAndReturn(run func(context.Context, tagmodel.GetTagsToTransactionsReq) ([]tagmodel.TagToTransaction, error)) *MockTagRepository_GetTagsToTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTag provides a mock function with given fields: _a0, _a1
func (_m *MockTagRepository) UpdateTag(_a0 context.Context, _a1 tagmodel.UpdateTagReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tagmodel.UpdateTagReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagRepository_UpdateTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTag'
type MockTagRepository_UpdateTag_Call struct {
	*mock.Call
}

// UpdateTag is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 tagmodel.UpdateTagReq
func (_e *MockTagRepository_Expecter) UpdateTag(_a0 interface{}, _a1 interface{}) *MockTagRepository_UpdateTag_Call {
	return &MockTagRepository_UpdateTag_Call{Call: _e.mock.On("UpdateTag", _a0, _a1)}
}

func (_c *MockTagRepository_UpdateTag_Call) Run(run func(_a0 context.Context, _a1 tagmodel.UpdateTagReq)) *MockTagRepository_UpdateTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tagmodel.UpdateTagReq))
	})
	return _c
}

func (_c *MockTagRepository_UpdateTag_Call) Return(_a0 error) *MockTagRepository_UpdateTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagRepository_UpdateTag_Call) RunAndReturn(run func(context.Context, tagmodel.UpdateTagReq) error) *MockTagRepository_UpdateTag_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagRepository creates a new instance of MockTagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagRepository {
	mock := &MockTagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

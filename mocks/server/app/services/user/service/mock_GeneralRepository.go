// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockGeneralRepository is an autogenerated mock type for the GeneralRepository type
type MockGeneralRepository struct {
	mock.Mock
}

type MockGeneralRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGeneralRepository) EXPECT() *MockGeneralRepository_Expecter {
	return &MockGeneralRepository_Expecter{mock: &_m.Mock}
}

// WithinTransaction provides a mock function with given fields: ctx, callback
func (_m *MockGeneralRepository) WithinTransaction(ctx context.Context, callback func(context.Context) error) error {
	ret := _m.Called(ctx, callback)

	if len(ret) == 0 {
		panic("no return value specified for WithinTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGeneralRepository_WithinTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTransaction'
type MockGeneralRepository_WithinTransaction_Call struct {
	*mock.Call
}

// WithinTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - callback func(context.Context) error
func (_e *MockGeneralRepository_Expecter) WithinTransaction(ctx interface{}, callback interface{}) *MockGeneralRepository_WithinTransaction_Call {
	return &MockGeneralRepository_WithinTransaction_Call{Call: _e.mock.On("WithinTransaction", ctx, callback)}
}

func (_c *MockGeneralRepository_WithinTransaction_Call) Run(run func(ctx context.Context, callback func(context.Context) error)) *MockGeneralRepository_WithinTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *MockGeneralRepository_WithinTransaction_Call) Return(_a0 error) *MockGeneralRepository_WithinTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGeneralRepository_WithinTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *MockGeneralRepository_WithinTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGeneralRepository creates a new instance of MockGeneralRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGeneralRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGeneralRepository {
	mock := &MockGeneralRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

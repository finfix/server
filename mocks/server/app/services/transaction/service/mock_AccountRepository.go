// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	accountmodel "server/app/services/account/model"

	mock "github.com/stretchr/testify/mock"

	model "server/app/services/account/repository/model"
)

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

type MockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepository) EXPECT() *MockAccountRepository_Expecter {
	return &MockAccountRepository_Expecter{mock: &_m.Mock}
}

// GetAccounts provides a mock function with given fields: _a0, _a1
func (_m *MockAccountRepository) GetAccounts(_a0 context.Context, _a1 model.GetAccountsReq) ([]accountmodel.Account, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccounts")
	}

	var r0 []accountmodel.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAccountsReq) ([]accountmodel.Account, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAccountsReq) []accountmodel.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accountmodel.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetAccountsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepository_GetAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccounts'
type MockAccountRepository_GetAccounts_Call struct {
	*mock.Call
}

// GetAccounts is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.GetAccountsReq
func (_e *MockAccountRepository_Expecter) GetAccounts(_a0 interface{}, _a1 interface{}) *MockAccountRepository_GetAccounts_Call {
	return &MockAccountRepository_GetAccounts_Call{Call: _e.mock.On("GetAccounts", _a0, _a1)}
}

func (_c *MockAccountRepository_GetAccounts_Call) Run(run func(_a0 context.Context, _a1 model.GetAccountsReq)) *MockAccountRepository_GetAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GetAccountsReq))
	})
	return _c
}

func (_c *MockAccountRepository_GetAccounts_Call) Return(_a0 []accountmodel.Account, _a1 error) *MockAccountRepository_GetAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRepository_GetAccounts_Call) RunAndReturn(run func(context.Context, model.GetAccountsReq) ([]accountmodel.Account, error)) *MockAccountRepository_GetAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

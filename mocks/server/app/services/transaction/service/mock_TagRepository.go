// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	model "server/app/services/tag/model"

	mock "github.com/stretchr/testify/mock"
)

// MockTagRepository is an autogenerated mock type for the TagRepository type
type MockTagRepository struct {
	mock.Mock
}

type MockTagRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagRepository) EXPECT() *MockTagRepository_Expecter {
	return &MockTagRepository_Expecter{mock: &_m.Mock}
}

// GetTagsToTransactions provides a mock function with given fields: _a0, _a1
func (_m *MockTagRepository) GetTagsToTransactions(_a0 context.Context, _a1 model.GetTagsToTransactionsReq) ([]model.TagToTransaction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsToTransactions")
	}

	var r0 []model.TagToTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetTagsToTransactionsReq) ([]model.TagToTransaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetTagsToTransactionsReq) []model.TagToTransaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TagToTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetTagsToTransactionsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagRepository_GetTagsToTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsToTransactions'
type MockTagRepository_GetTagsToTransactions_Call struct {
	*mock.Call
}

// GetTagsToTransactions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.GetTagsToTransactionsReq
func (_e *MockTagRepository_Expecter) GetTagsToTransactions(_a0 interface{}, _a1 interface{}) *MockTagRepository_GetTagsToTransactions_Call {
	return &MockTagRepository_GetTagsToTransactions_Call{Call: _e.mock.On("GetTagsToTransactions", _a0, _a1)}
}

func (_c *MockTagRepository_GetTagsToTransactions_Call) Run(run func(_a0 context.Context, _a1 model.GetTagsToTransactionsReq)) *MockTagRepository_GetTagsToTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GetTagsToTransactionsReq))
	})
	return _c
}

func (_c *MockTagRepository_GetTagsToTransactions_Call) Return(_a0 []model.TagToTransaction, _a1 error) *MockTagRepository_GetTagsToTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagRepository_GetTagsToTransactions_Call) RunAndReturn(run func(context.Context, model.GetTagsToTransactionsReq) ([]model.TagToTransaction, error)) *MockTagRepository_GetTagsToTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// LinkTagsToTransaction provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockTagRepository) LinkTagsToTransaction(_a0 context.Context, _a1 []uint32, _a2 uint32) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for LinkTagsToTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, uint32) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagRepository_LinkTagsToTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkTagsToTransaction'
type MockTagRepository_LinkTagsToTransaction_Call struct {
	*mock.Call
}

// LinkTagsToTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []uint32
//   - _a2 uint32
func (_e *MockTagRepository_Expecter) LinkTagsToTransaction(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockTagRepository_LinkTagsToTransaction_Call {
	return &MockTagRepository_LinkTagsToTransaction_Call{Call: _e.mock.On("LinkTagsToTransaction", _a0, _a1, _a2)}
}

func (_c *MockTagRepository_LinkTagsToTransaction_Call) Run(run func(_a0 context.Context, _a1 []uint32, _a2 uint32)) *MockTagRepository_LinkTagsToTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint32), args[2].(uint32))
	})
	return _c
}

func (_c *MockTagRepository_LinkTagsToTransaction_Call) Return(_a0 error) *MockTagRepository_LinkTagsToTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagRepository_LinkTagsToTransaction_Call) RunAndReturn(run func(context.Context, []uint32, uint32) error) *MockTagRepository_LinkTagsToTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkTagsFromTransaction provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockTagRepository) UnlinkTagsFromTransaction(_a0 context.Context, _a1 []uint32, _a2 uint32) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkTagsFromTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, uint32) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagRepository_UnlinkTagsFromTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkTagsFromTransaction'
type MockTagRepository_UnlinkTagsFromTransaction_Call struct {
	*mock.Call
}

// UnlinkTagsFromTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []uint32
//   - _a2 uint32
func (_e *MockTagRepository_Expecter) UnlinkTagsFromTransaction(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockTagRepository_UnlinkTagsFromTransaction_Call {
	return &MockTagRepository_UnlinkTagsFromTransaction_Call{Call: _e.mock.On("UnlinkTagsFromTransaction", _a0, _a1, _a2)}
}

func (_c *MockTagRepository_UnlinkTagsFromTransaction_Call) Run(run func(_a0 context.Context, _a1 []uint32, _a2 uint32)) *MockTagRepository_UnlinkTagsFromTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint32), args[2].(uint32))
	})
	return _c
}

func (_c *MockTagRepository_UnlinkTagsFromTransaction_Call) Return(_a0 error) *MockTagRepository_UnlinkTagsFromTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagRepository_UnlinkTagsFromTransaction_Call) RunAndReturn(run func(context.Context, []uint32, uint32) error) *MockTagRepository_UnlinkTagsFromTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagRepository creates a new instance of MockTagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagRepository {
	mock := &MockTagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

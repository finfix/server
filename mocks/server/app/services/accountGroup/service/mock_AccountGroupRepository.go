// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	accountGroupmodel "server/app/services/accountGroup/model"

	mock "github.com/stretchr/testify/mock"

	model "server/app/services/accountGroup/repository/model"
)

// MockAccountGroupRepository is an autogenerated mock type for the AccountGroupRepository type
type MockAccountGroupRepository struct {
	mock.Mock
}

type MockAccountGroupRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountGroupRepository) EXPECT() *MockAccountGroupRepository_Expecter {
	return &MockAccountGroupRepository_Expecter{mock: &_m.Mock}
}

// CreateAccountGroup provides a mock function with given fields: _a0, _a1
func (_m *MockAccountGroupRepository) CreateAccountGroup(_a0 context.Context, _a1 model.CreateAccountGroupReq) (uint32, uint32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountGroup")
	}

	var r0 uint32
	var r1 uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateAccountGroupReq) (uint32, uint32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateAccountGroupReq) uint32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateAccountGroupReq) uint32); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.CreateAccountGroupReq) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAccountGroupRepository_CreateAccountGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccountGroup'
type MockAccountGroupRepository_CreateAccountGroup_Call struct {
	*mock.Call
}

// CreateAccountGroup is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.CreateAccountGroupReq
func (_e *MockAccountGroupRepository_Expecter) CreateAccountGroup(_a0 interface{}, _a1 interface{}) *MockAccountGroupRepository_CreateAccountGroup_Call {
	return &MockAccountGroupRepository_CreateAccountGroup_Call{Call: _e.mock.On("CreateAccountGroup", _a0, _a1)}
}

func (_c *MockAccountGroupRepository_CreateAccountGroup_Call) Run(run func(_a0 context.Context, _a1 model.CreateAccountGroupReq)) *MockAccountGroupRepository_CreateAccountGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateAccountGroupReq))
	})
	return _c
}

func (_c *MockAccountGroupRepository_CreateAccountGroup_Call) Return(_a0 uint32, _a1 uint32, _a2 error) *MockAccountGroupRepository_CreateAccountGroup_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAccountGroupRepository_CreateAccountGroup_Call) RunAndReturn(run func(context.Context, model.CreateAccountGroupReq) (uint32, uint32, error)) *MockAccountGroupRepository_CreateAccountGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountGroup provides a mock function with given fields: ctx, id
func (_m *MockAccountGroupRepository) DeleteAccountGroup(ctx context.Context, id uint32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountGroupRepository_DeleteAccountGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountGroup'
type MockAccountGroupRepository_DeleteAccountGroup_Call struct {
	*mock.Call
}

// DeleteAccountGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint32
func (_e *MockAccountGroupRepository_Expecter) DeleteAccountGroup(ctx interface{}, id interface{}) *MockAccountGroupRepository_DeleteAccountGroup_Call {
	return &MockAccountGroupRepository_DeleteAccountGroup_Call{Call: _e.mock.On("DeleteAccountGroup", ctx, id)}
}

func (_c *MockAccountGroupRepository_DeleteAccountGroup_Call) Run(run func(ctx context.Context, id uint32)) *MockAccountGroupRepository_DeleteAccountGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *MockAccountGroupRepository_DeleteAccountGroup_Call) Return(_a0 error) *MockAccountGroupRepository_DeleteAccountGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountGroupRepository_DeleteAccountGroup_Call) RunAndReturn(run func(context.Context, uint32) error) *MockAccountGroupRepository_DeleteAccountGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountGroups provides a mock function with given fields: _a0, _a1
func (_m *MockAccountGroupRepository) GetAccountGroups(_a0 context.Context, _a1 accountGroupmodel.GetAccountGroupsReq) ([]accountGroupmodel.AccountGroup, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountGroups")
	}

	var r0 []accountGroupmodel.AccountGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, accountGroupmodel.GetAccountGroupsReq) ([]accountGroupmodel.AccountGroup, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, accountGroupmodel.GetAccountGroupsReq) []accountGroupmodel.AccountGroup); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accountGroupmodel.AccountGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, accountGroupmodel.GetAccountGroupsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountGroupRepository_GetAccountGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountGroups'
type MockAccountGroupRepository_GetAccountGroups_Call struct {
	*mock.Call
}

// GetAccountGroups is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 accountGroupmodel.GetAccountGroupsReq
func (_e *MockAccountGroupRepository_Expecter) GetAccountGroups(_a0 interface{}, _a1 interface{}) *MockAccountGroupRepository_GetAccountGroups_Call {
	return &MockAccountGroupRepository_GetAccountGroups_Call{Call: _e.mock.On("GetAccountGroups", _a0, _a1)}
}

func (_c *MockAccountGroupRepository_GetAccountGroups_Call) Run(run func(_a0 context.Context, _a1 accountGroupmodel.GetAccountGroupsReq)) *MockAccountGroupRepository_GetAccountGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(accountGroupmodel.GetAccountGroupsReq))
	})
	return _c
}

func (_c *MockAccountGroupRepository_GetAccountGroups_Call) Return(_a0 []accountGroupmodel.AccountGroup, _a1 error) *MockAccountGroupRepository_GetAccountGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountGroupRepository_GetAccountGroups_Call) RunAndReturn(run func(context.Context, accountGroupmodel.GetAccountGroupsReq) ([]accountGroupmodel.AccountGroup, error)) *MockAccountGroupRepository_GetAccountGroups_Call {
	_c.Call.Return(run)
	return _c
}

// LinkUserToAccountGroup provides a mock function with given fields: ctx, userID, accountGroupID
func (_m *MockAccountGroupRepository) LinkUserToAccountGroup(ctx context.Context, userID uint32, accountGroupID uint32) error {
	ret := _m.Called(ctx, userID, accountGroupID)

	if len(ret) == 0 {
		panic("no return value specified for LinkUserToAccountGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, userID, accountGroupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountGroupRepository_LinkUserToAccountGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkUserToAccountGroup'
type MockAccountGroupRepository_LinkUserToAccountGroup_Call struct {
	*mock.Call
}

// LinkUserToAccountGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint32
//   - accountGroupID uint32
func (_e *MockAccountGroupRepository_Expecter) LinkUserToAccountGroup(ctx interface{}, userID interface{}, accountGroupID interface{}) *MockAccountGroupRepository_LinkUserToAccountGroup_Call {
	return &MockAccountGroupRepository_LinkUserToAccountGroup_Call{Call: _e.mock.On("LinkUserToAccountGroup", ctx, userID, accountGroupID)}
}

func (_c *MockAccountGroupRepository_LinkUserToAccountGroup_Call) Run(run func(ctx context.Context, userID uint32, accountGroupID uint32)) *MockAccountGroupRepository_LinkUserToAccountGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(uint32))
	})
	return _c
}

func (_c *MockAccountGroupRepository_LinkUserToAccountGroup_Call) Return(_a0 error) *MockAccountGroupRepository_LinkUserToAccountGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountGroupRepository_LinkUserToAccountGroup_Call) RunAndReturn(run func(context.Context, uint32, uint32) error) *MockAccountGroupRepository_LinkUserToAccountGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UnlinkUserFromAccountGroup provides a mock function with given fields: ctx, userID, accountGroupID
func (_m *MockAccountGroupRepository) UnlinkUserFromAccountGroup(ctx context.Context, userID uint32, accountGroupID uint32) error {
	ret := _m.Called(ctx, userID, accountGroupID)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkUserFromAccountGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, userID, accountGroupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountGroupRepository_UnlinkUserFromAccountGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlinkUserFromAccountGroup'
type MockAccountGroupRepository_UnlinkUserFromAccountGroup_Call struct {
	*mock.Call
}

// UnlinkUserFromAccountGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint32
//   - accountGroupID uint32
func (_e *MockAccountGroupRepository_Expecter) UnlinkUserFromAccountGroup(ctx interface{}, userID interface{}, accountGroupID interface{}) *MockAccountGroupRepository_UnlinkUserFromAccountGroup_Call {
	return &MockAccountGroupRepository_UnlinkUserFromAccountGroup_Call{Call: _e.mock.On("UnlinkUserFromAccountGroup", ctx, userID, accountGroupID)}
}

func (_c *MockAccountGroupRepository_UnlinkUserFromAccountGroup_Call) Run(run func(ctx context.Context, userID uint32, accountGroupID uint32)) *MockAccountGroupRepository_UnlinkUserFromAccountGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(uint32))
	})
	return _c
}

func (_c *MockAccountGroupRepository_UnlinkUserFromAccountGroup_Call) Return(_a0 error) *MockAccountGroupRepository_UnlinkUserFromAccountGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountGroupRepository_UnlinkUserFromAccountGroup_Call) RunAndReturn(run func(context.Context, uint32, uint32) error) *MockAccountGroupRepository_UnlinkUserFromAccountGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccountGroup provides a mock function with given fields: _a0, _a1
func (_m *MockAccountGroupRepository) UpdateAccountGroup(_a0 context.Context, _a1 accountGroupmodel.UpdateAccountGroupReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, accountGroupmodel.UpdateAccountGroupReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountGroupRepository_UpdateAccountGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccountGroup'
type MockAccountGroupRepository_UpdateAccountGroup_Call struct {
	*mock.Call
}

// UpdateAccountGroup is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 accountGroupmodel.UpdateAccountGroupReq
func (_e *MockAccountGroupRepository_Expecter) UpdateAccountGroup(_a0 interface{}, _a1 interface{}) *MockAccountGroupRepository_UpdateAccountGroup_Call {
	return &MockAccountGroupRepository_UpdateAccountGroup_Call{Call: _e.mock.On("UpdateAccountGroup", _a0, _a1)}
}

func (_c *MockAccountGroupRepository_UpdateAccountGroup_Call) Run(run func(_a0 context.Context, _a1 accountGroupmodel.UpdateAccountGroupReq)) *MockAccountGroupRepository_UpdateAccountGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(accountGroupmodel.UpdateAccountGroupReq))
	})
	return _c
}

func (_c *MockAccountGroupRepository_UpdateAccountGroup_Call) Return(_a0 error) *MockAccountGroupRepository_UpdateAccountGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountGroupRepository_UpdateAccountGroup_Call) RunAndReturn(run func(context.Context, accountGroupmodel.UpdateAccountGroupReq) error) *MockAccountGroupRepository_UpdateAccountGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountGroupRepository creates a new instance of MockAccountGroupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountGroupRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountGroupRepository {
	mock := &MockAccountGroupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

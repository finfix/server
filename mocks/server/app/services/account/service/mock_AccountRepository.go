// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	accountmodel "server/app/services/account/model"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"

	model "server/app/services/account/repository/model"
)

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

type MockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepository) EXPECT() *MockAccountRepository_Expecter {
	return &MockAccountRepository_Expecter{mock: &_m.Mock}
}

// CalculateRemainderAccounts provides a mock function with given fields: ctx, req
func (_m *MockAccountRepository) CalculateRemainderAccounts(ctx context.Context, req model.CalculateRemaindersAccountsReq) (map[uint32]decimal.Decimal, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CalculateRemainderAccounts")
	}

	var r0 map[uint32]decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CalculateRemaindersAccountsReq) (map[uint32]decimal.Decimal, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CalculateRemaindersAccountsReq) map[uint32]decimal.Decimal); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint32]decimal.Decimal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CalculateRemaindersAccountsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepository_CalculateRemainderAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateRemainderAccounts'
type MockAccountRepository_CalculateRemainderAccounts_Call struct {
	*mock.Call
}

// CalculateRemainderAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.CalculateRemaindersAccountsReq
func (_e *MockAccountRepository_Expecter) CalculateRemainderAccounts(ctx interface{}, req interface{}) *MockAccountRepository_CalculateRemainderAccounts_Call {
	return &MockAccountRepository_CalculateRemainderAccounts_Call{Call: _e.mock.On("CalculateRemainderAccounts", ctx, req)}
}

func (_c *MockAccountRepository_CalculateRemainderAccounts_Call) Run(run func(ctx context.Context, req model.CalculateRemaindersAccountsReq)) *MockAccountRepository_CalculateRemainderAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CalculateRemaindersAccountsReq))
	})
	return _c
}

func (_c *MockAccountRepository_CalculateRemainderAccounts_Call) Return(_a0 map[uint32]decimal.Decimal, _a1 error) *MockAccountRepository_CalculateRemainderAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRepository_CalculateRemainderAccounts_Call) RunAndReturn(run func(context.Context, model.CalculateRemaindersAccountsReq) (map[uint32]decimal.Decimal, error)) *MockAccountRepository_CalculateRemainderAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeSerialNumbers provides a mock function with given fields: ctx, accountGroupID, oldValue, newValue
func (_m *MockAccountRepository) ChangeSerialNumbers(ctx context.Context, accountGroupID uint32, oldValue uint32, newValue uint32) error {
	ret := _m.Called(ctx, accountGroupID, oldValue, newValue)

	if len(ret) == 0 {
		panic("no return value specified for ChangeSerialNumbers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) error); ok {
		r0 = rf(ctx, accountGroupID, oldValue, newValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountRepository_ChangeSerialNumbers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeSerialNumbers'
type MockAccountRepository_ChangeSerialNumbers_Call struct {
	*mock.Call
}

// ChangeSerialNumbers is a helper method to define mock.On call
//   - ctx context.Context
//   - accountGroupID uint32
//   - oldValue uint32
//   - newValue uint32
func (_e *MockAccountRepository_Expecter) ChangeSerialNumbers(ctx interface{}, accountGroupID interface{}, oldValue interface{}, newValue interface{}) *MockAccountRepository_ChangeSerialNumbers_Call {
	return &MockAccountRepository_ChangeSerialNumbers_Call{Call: _e.mock.On("ChangeSerialNumbers", ctx, accountGroupID, oldValue, newValue)}
}

func (_c *MockAccountRepository_ChangeSerialNumbers_Call) Run(run func(ctx context.Context, accountGroupID uint32, oldValue uint32, newValue uint32)) *MockAccountRepository_ChangeSerialNumbers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(uint32), args[3].(uint32))
	})
	return _c
}

func (_c *MockAccountRepository_ChangeSerialNumbers_Call) Return(_a0 error) *MockAccountRepository_ChangeSerialNumbers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountRepository_ChangeSerialNumbers_Call) RunAndReturn(run func(context.Context, uint32, uint32, uint32) error) *MockAccountRepository_ChangeSerialNumbers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccount provides a mock function with given fields: _a0, _a1
func (_m *MockAccountRepository) CreateAccount(_a0 context.Context, _a1 model.CreateAccountReq) (uint32, uint32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 uint32
	var r1 uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateAccountReq) (uint32, uint32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateAccountReq) uint32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateAccountReq) uint32); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.CreateAccountReq) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAccountRepository_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockAccountRepository_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.CreateAccountReq
func (_e *MockAccountRepository_Expecter) CreateAccount(_a0 interface{}, _a1 interface{}) *MockAccountRepository_CreateAccount_Call {
	return &MockAccountRepository_CreateAccount_Call{Call: _e.mock.On("CreateAccount", _a0, _a1)}
}

func (_c *MockAccountRepository_CreateAccount_Call) Run(run func(_a0 context.Context, _a1 model.CreateAccountReq)) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateAccountReq))
	})
	return _c
}

func (_c *MockAccountRepository_CreateAccount_Call) Return(_a0 uint32, _a1 uint32, _a2 error) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAccountRepository_CreateAccount_Call) RunAndReturn(run func(context.Context, model.CreateAccountReq) (uint32, uint32, error)) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *MockAccountRepository) DeleteAccount(ctx context.Context, id uint32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountRepository_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type MockAccountRepository_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint32
func (_e *MockAccountRepository_Expecter) DeleteAccount(ctx interface{}, id interface{}) *MockAccountRepository_DeleteAccount_Call {
	return &MockAccountRepository_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount", ctx, id)}
}

func (_c *MockAccountRepository_DeleteAccount_Call) Run(run func(ctx context.Context, id uint32)) *MockAccountRepository_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *MockAccountRepository_DeleteAccount_Call) Return(_a0 error) *MockAccountRepository_DeleteAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountRepository_DeleteAccount_Call) RunAndReturn(run func(context.Context, uint32) error) *MockAccountRepository_DeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccounts provides a mock function with given fields: _a0, _a1
func (_m *MockAccountRepository) GetAccounts(_a0 context.Context, _a1 model.GetAccountsReq) ([]accountmodel.Account, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccounts")
	}

	var r0 []accountmodel.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAccountsReq) ([]accountmodel.Account, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAccountsReq) []accountmodel.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accountmodel.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetAccountsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepository_GetAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccounts'
type MockAccountRepository_GetAccounts_Call struct {
	*mock.Call
}

// GetAccounts is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.GetAccountsReq
func (_e *MockAccountRepository_Expecter) GetAccounts(_a0 interface{}, _a1 interface{}) *MockAccountRepository_GetAccounts_Call {
	return &MockAccountRepository_GetAccounts_Call{Call: _e.mock.On("GetAccounts", _a0, _a1)}
}

func (_c *MockAccountRepository_GetAccounts_Call) Run(run func(_a0 context.Context, _a1 model.GetAccountsReq)) *MockAccountRepository_GetAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.GetAccountsReq))
	})
	return _c
}

func (_c *MockAccountRepository_GetAccounts_Call) Return(_a0 []accountmodel.Account, _a1 error) *MockAccountRepository_GetAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRepository_GetAccounts_Call) RunAndReturn(run func(context.Context, model.GetAccountsReq) ([]accountmodel.Account, error)) *MockAccountRepository_GetAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function with given fields: _a0, _a1
func (_m *MockAccountRepository) UpdateAccount(_a0 context.Context, _a1 map[uint32]model.UpdateAccountReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[uint32]model.UpdateAccountReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountRepository_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type MockAccountRepository_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 map[uint32]model.UpdateAccountReq
func (_e *MockAccountRepository_Expecter) UpdateAccount(_a0 interface{}, _a1 interface{}) *MockAccountRepository_UpdateAccount_Call {
	return &MockAccountRepository_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", _a0, _a1)}
}

func (_c *MockAccountRepository_UpdateAccount_Call) Run(run func(_a0 context.Context, _a1 map[uint32]model.UpdateAccountReq)) *MockAccountRepository_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[uint32]model.UpdateAccountReq))
	})
	return _c
}

func (_c *MockAccountRepository_UpdateAccount_Call) Return(_a0 error) *MockAccountRepository_UpdateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountRepository_UpdateAccount_Call) RunAndReturn(run func(context.Context, map[uint32]model.UpdateAccountReq) error) *MockAccountRepository_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	accountPermissions "server/app/services/accountPermissions"

	mock "github.com/stretchr/testify/mock"

	model "server/app/services/account/model"
)

// MockAccountPermissionsService is an autogenerated mock type for the AccountPermissionsService type
type MockAccountPermissionsService struct {
	mock.Mock
}

type MockAccountPermissionsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountPermissionsService) EXPECT() *MockAccountPermissionsService_Expecter {
	return &MockAccountPermissionsService_Expecter{mock: &_m.Mock}
}

// CheckAccountPermissions provides a mock function with given fields: req, permissions
func (_m *MockAccountPermissionsService) CheckAccountPermissions(req model.UpdateAccountReq, permissions accountPermissions.AccountPermissions) error {
	ret := _m.Called(req, permissions)

	if len(ret) == 0 {
		panic("no return value specified for CheckAccountPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UpdateAccountReq, accountPermissions.AccountPermissions) error); ok {
		r0 = rf(req, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountPermissionsService_CheckAccountPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAccountPermissions'
type MockAccountPermissionsService_CheckAccountPermissions_Call struct {
	*mock.Call
}

// CheckAccountPermissions is a helper method to define mock.On call
//   - req model.UpdateAccountReq
//   - permissions accountPermissions.AccountPermissions
func (_e *MockAccountPermissionsService_Expecter) CheckAccountPermissions(req interface{}, permissions interface{}) *MockAccountPermissionsService_CheckAccountPermissions_Call {
	return &MockAccountPermissionsService_CheckAccountPermissions_Call{Call: _e.mock.On("CheckAccountPermissions", req, permissions)}
}

func (_c *MockAccountPermissionsService_CheckAccountPermissions_Call) Run(run func(req model.UpdateAccountReq, permissions accountPermissions.AccountPermissions)) *MockAccountPermissionsService_CheckAccountPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.UpdateAccountReq), args[1].(accountPermissions.AccountPermissions))
	})
	return _c
}

func (_c *MockAccountPermissionsService_CheckAccountPermissions_Call) Return(_a0 error) *MockAccountPermissionsService_CheckAccountPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountPermissionsService_CheckAccountPermissions_Call) RunAndReturn(run func(model.UpdateAccountReq, accountPermissions.AccountPermissions) error) *MockAccountPermissionsService_CheckAccountPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountPermissions provides a mock function with given fields: account
func (_m *MockAccountPermissionsService) GetAccountPermissions(account model.Account) accountPermissions.AccountPermissions {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountPermissions")
	}

	var r0 accountPermissions.AccountPermissions
	if rf, ok := ret.Get(0).(func(model.Account) accountPermissions.AccountPermissions); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(accountPermissions.AccountPermissions)
	}

	return r0
}

// MockAccountPermissionsService_GetAccountPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountPermissions'
type MockAccountPermissionsService_GetAccountPermissions_Call struct {
	*mock.Call
}

// GetAccountPermissions is a helper method to define mock.On call
//   - account model.Account
func (_e *MockAccountPermissionsService_Expecter) GetAccountPermissions(account interface{}) *MockAccountPermissionsService_GetAccountPermissions_Call {
	return &MockAccountPermissionsService_GetAccountPermissions_Call{Call: _e.mock.On("GetAccountPermissions", account)}
}

func (_c *MockAccountPermissionsService_GetAccountPermissions_Call) Run(run func(account model.Account)) *MockAccountPermissionsService_GetAccountPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Account))
	})
	return _c
}

func (_c *MockAccountPermissionsService_GetAccountPermissions_Call) Return(_a0 accountPermissions.AccountPermissions) *MockAccountPermissionsService_GetAccountPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountPermissionsService_GetAccountPermissions_Call) RunAndReturn(run func(model.Account) accountPermissions.AccountPermissions) *MockAccountPermissionsService_GetAccountPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountPermissionsService creates a new instance of MockAccountPermissionsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountPermissionsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountPermissionsService {
	mock := &MockAccountPermissionsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

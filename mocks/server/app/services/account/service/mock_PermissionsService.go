// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	model "server/app/services/account/model"

	mock "github.com/stretchr/testify/mock"

	permissions "server/app/services/permissions"
)

// MockPermissionsService is an autogenerated mock type for the PermissionsService type
type MockPermissionsService struct {
	mock.Mock
}

type MockPermissionsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionsService) EXPECT() *MockPermissionsService_Expecter {
	return &MockPermissionsService_Expecter{mock: &_m.Mock}
}

// CheckPermissions provides a mock function with given fields: req, _a1
func (_m *MockPermissionsService) CheckPermissions(req model.UpdateReq, _a1 permissions.Permissions) error {
	ret := _m.Called(req, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UpdateReq, permissions.Permissions) error); ok {
		r0 = rf(req, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPermissionsService_CheckPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPermissions'
type MockPermissionsService_CheckPermissions_Call struct {
	*mock.Call
}

// CheckPermissions is a helper method to define mock.On call
//   - req model.UpdateReq
//   - _a1 permissions.Permissions
func (_e *MockPermissionsService_Expecter) CheckPermissions(req interface{}, _a1 interface{}) *MockPermissionsService_CheckPermissions_Call {
	return &MockPermissionsService_CheckPermissions_Call{Call: _e.mock.On("CheckPermissions", req, _a1)}
}

func (_c *MockPermissionsService_CheckPermissions_Call) Run(run func(req model.UpdateReq, _a1 permissions.Permissions)) *MockPermissionsService_CheckPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.UpdateReq), args[1].(permissions.Permissions))
	})
	return _c
}

func (_c *MockPermissionsService_CheckPermissions_Call) Return(_a0 error) *MockPermissionsService_CheckPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionsService_CheckPermissions_Call) RunAndReturn(run func(model.UpdateReq, permissions.Permissions) error) *MockPermissionsService_CheckPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: account
func (_m *MockPermissionsService) GetPermissions(account model.Account) permissions.Permissions {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 permissions.Permissions
	if rf, ok := ret.Get(0).(func(model.Account) permissions.Permissions); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(permissions.Permissions)
	}

	return r0
}

// MockPermissionsService_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockPermissionsService_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - account model.Account
func (_e *MockPermissionsService_Expecter) GetPermissions(account interface{}) *MockPermissionsService_GetPermissions_Call {
	return &MockPermissionsService_GetPermissions_Call{Call: _e.mock.On("GetPermissions", account)}
}

func (_c *MockPermissionsService_GetPermissions_Call) Run(run func(account model.Account)) *MockPermissionsService_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Account))
	})
	return _c
}

func (_c *MockPermissionsService_GetPermissions_Call) Return(_a0 permissions.Permissions) *MockPermissionsService_GetPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionsService_GetPermissions_Call) RunAndReturn(run func(model.Account) permissions.Permissions) *MockPermissionsService_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPermissionsService creates a new instance of MockPermissionsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionsService {
	mock := &MockPermissionsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

syntax = "proto3";

option go_package = "core/app/proto/pbTransaction";

import "google/protobuf/empty.proto";
import "pkg/proto/pbDatetime/datetime.proto";
import "app/proto/pbEnum/enum.proto";

package pbTransaction;

service transaction {
  rpc Create(CreateReq) returns (CreateRes);
  rpc Update(UpdateReq) returns (google.protobuf.Empty);
  rpc Delete(DeleteReq) returns (google.protobuf.Empty);
  rpc Get(GetReq) returns (GetRes);
}

message DeleteReq {
  uint32 ID = 1; // Идентификатор транзакции
  uint32 userID = 2; // Идентификатор пользователя
}

message CreateReq {
  enums.TransactionType type = 1; // Тип транзакции
  double amountFrom = 2; // Сумма списания с первого счета
  double amountTo = 3; // Сумма пополнения второго счета (в случаях меж валютной транзакции цифры отличаются)
  string note = 4; // Заметка для транзакции
  uint32 accountFromID = 5; // Идентификатор счета списания
  uint32 accountToID = 6; // Идентификатор счета пополнения
  datetime.Timestamp dateTransaction = 7; // Дата транзакции
  optional bool isExecuted = 8; // Исполнена операция или нет (если нет, сделки как бы не существует)
  uint32 userID = 9; // Идентификатор пользователя
}

message CreateRes {
  uint32 ID = 1; // Идентификатор транзакции
}

message UpdateReq {
  uint32 ID = 1; // Идентификатор транзакции
  uint32 userID = 2; // Идентификатор пользователя
  optional double amountFrom = 3; // Сумма списания с первого счета
  optional double amountTo = 4; // Сумма пополнения второго счета
  optional string note = 5; // Заметка для транзакции
  optional uint32 accountFromID = 6; // Идентификатор счета списания
  optional uint32 accountToID = 7; // Идентификатор счета пополнения
  optional datetime.Timestamp dateTransaction = 8; // Дата транзакции
  optional bool isExecuted = 9; // Исполнена операция или нет (если нет, сделки как бы не существует)
}

message GetReq {
  uint32 userID = 1; // Идентификатор пользователя
  optional uint32 offset = 2; // Смещение для пагинации
  optional uint32 limit = 3; // Лимит для пагинации
  optional uint32 accountID = 4; // Транзакции какого счета нас интересуют
  optional enums.TransactionType type = 5; // Тип транзакции
  optional datetime.Timestamp dateFrom = 6; // Дата, от которой начинать учитывать транзакции
  optional datetime.Timestamp dateTo = 7; // Дата, до которой учитывать транзакции
}

message GetRes {
    repeated Transaction transactions = 1;
}

message Transaction {
  uint32 ID = 1; // Идентификатор транзакции
  enums.TransactionType type = 2; // Тип транзакции
  repeated Tag tags = 3; // Подкатегории
  double amountFrom = 4; // Сумма сделки в первой валюте
  double amountTo = 5; // Сумма сделки во второй валюте
  string note = 6; // Заметка сделки
  uint32 accountFromID = 7; // Идентификатор счета списания
  uint32 accountToID = 8; // Идентификатор счета пополнения
  datetime.Timestamp dateTransaction = 9; // Дата транзакции (пользовательские)
  bool isExecuted = 10; // Исполнена операция или нет (если нет, сделки как бы не существует)
  bool accounting = 11; // Учитывается ли транзакция в статистике или нет
  optional datetime.Timestamp timeCreate = 12; // Дата и время создания транзакции
}

message Tag {
  uint32 transactionID = 1; // Идентификатор транзакции
  uint32 tagID = 2; // Идентификатор подкатегории
}

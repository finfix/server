syntax = "proto3";

option go_package = "core/app/proto/pbAccount";

import "google/protobuf/empty.proto";
import "pkg/proto/pbDatetime/datetime.proto";
import "app/proto/pbEnum/enum.proto";

package pbAccount;

service account {
  rpc Create(CreateReq) returns (CreateRes);
  rpc Get(GetReq) returns (GetRes);
  rpc Update(UpdateReq) returns (google.protobuf.Empty);
  rpc Delete(DeleteReq) returns (google.protobuf.Empty);
  rpc Switch(SwitchReq) returns (google.protobuf.Empty);
  rpc QuickStatistic(QuickStatisticReq) returns (QuickStatisticRes);
  rpc GetAccountGroups(GetAccountGroupsReq) returns (GetAccountGroupsRes);
}

message GetAccountGroupsReq {
  uint32 userID = 1; // Идентификатор пользователя
  repeated uint32 accountGroupIDs = 3; // Идентификаторы групп счетов
}

message GetAccountGroupsRes {
  repeated AccountGroup accountGroups = 1; // Список групп счетов
}

message AccountGroup {
  uint32 ID = 1; // Идентификатор группы счетов
  string name = 2; // Название группы счетов
  string currency = 3; // Валюта группы счетов
  uint32 serialNumber = 4; // Порядковый номер группы счетов
  bool visible = 5; // Видимость группы счетов
}

message QuickStatisticReq {
  uint32 userID = 1; // Идентификатор пользователя
}

message QuickStatisticRes {
  repeated QuickStatistic quickStatistic = 1; // Краткая статистика
}

message QuickStatistic {
  double totalRemainder = 1; // Общая сумма видимых счетов
  double totalExpense = 2; // Общая сумма расходов
  uint32 accountGroupID = 3; // Идентификатор группы счетов
  double totalBudget = 4; // Общая сумма расходов
  string currency = 5; // Валюта
}

message SwitchReq {
  uint32 ID1 = 1; // Идентификатор первого счета
  uint32 ID2 = 2; // Идентификатор второго счета
  uint32 userID = 3; // Идентификатор пользователя
}

message DeleteReq {
  uint32 ID = 1; // Идентификатор счета
  uint32 userID = 2; // Идентификатор пользователя
}

message CreateReq {
  double budget = 1; // Месячный бюджет
  double remainder = 2; // Остаток средств на счету
  string name = 3; // Название счета
  uint32 iconID = 4; // Идентификатор иконки
  enums.AccountType type = 5; // Тип счета
  string currency = 6; // Валюта счета
  uint32 accountGroupID = 7; // Группа счета
  bool accounting = 8; // Подсчет суммы счета в статистике
  uint32 userID = 9; // Идентификатор пользователя
  bool gradualBudgetFilling = 10; // Постепенное пополнение бюджета
}

message CreateRes {
  uint32 ID = 1; // Идентификатор созданного счета
}

message GetReq {
  uint32 userID = 1; // Идентификатор пользователя
  optional enums.AccountType type = 2; // Тип счета
  optional bool accounting = 3; // Будет ли счет учитываться в статистике
  repeated uint32 accountGroupIDs = 4; // Идентификатор группы счета
  optional datetime.Timestamp dateFrom = 6; // Дата начала выборки (Обязательна при type = expense or earnings и отсутствующем периоде)
  optional datetime.Timestamp dateTo = 7; // Дата конца выборки (Обязательна при type = expense or earnings и отсутствующем периоде)
  optional bool visible = 8; // Видимость счета
}

message UpdateReq {
  uint32 userID = 1; // Идентификатор пользователя
  uint32 ID = 2; // Идентификатор счета
  optional int32 budget = 3; // Месячный бюджет
  optional double remainder = 4; // Остаток средств на счету
  optional string name = 5; // Название счета
  optional uint32 iconID = 6; // Идентификатор иконки
  optional bool visible = 7; // Видимость счета
  optional uint32 accountGroupID = 8; // Идентификатор группы счета
  optional bool accounting = 9; // Будет ли счет учитываться в статистике
  optional bool gradualBudgetFilling = 10; // Постепенное пополнение бюджета
}

message GetRes {
  repeated Account accounts = 1; // Список счетов
}

message Account {
  uint32 ID = 1; // Идентификатор счета
  double budget = 2; // Месячный бюджет
  double remainder = 3; // Остаток средств на счету
  string name = 4; // Название счета
  uint32 iconID = 5; // Идентификатор иконки
  enums.AccountType type = 6; // Тип счета
  string currency = 7; // Валюта счета
  bool visible = 8; // Видимость счета
  uint32 accountGroupID = 9; // Идентификатор группы счета
  bool accounting = 10; // Будет ли счет учитываться в статистике
  uint32 userID = 11; // Идентификатор пользователя
  optional uint32 parentAccountID = 12; // Идентификатор связи
  repeated Account childrenAccounts = 13; // Дочерние аккаунты
  string currencySymbol = 14; // Символ валюты
  bool gradualBudgetFilling = 15; // Постепенное пополнение бюджета
  uint32 serialNumber = 16; // Порядковый номер счета
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	date "server/pkg/datetime/date"

	mock "github.com/stretchr/testify/mock"

	model "server/app/services/account/model"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// CalculateBalancingAmount provides a mock function with given fields: ctx, accountGroupIDs, dateFrom, dateTo
func (_m *AccountRepository) CalculateBalancingAmount(ctx context.Context, accountGroupIDs []uint32, dateFrom date.Date, dateTo date.Date) ([]model.BalancingAmount, error) {
	ret := _m.Called(ctx, accountGroupIDs, dateFrom, dateTo)

	if len(ret) == 0 {
		panic("no return value specified for CalculateBalancingAmount")
	}

	var r0 []model.BalancingAmount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, date.Date, date.Date) ([]model.BalancingAmount, error)); ok {
		return rf(ctx, accountGroupIDs, dateFrom, dateTo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, date.Date, date.Date) []model.BalancingAmount); ok {
		r0 = rf(ctx, accountGroupIDs, dateFrom, dateTo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BalancingAmount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint32, date.Date, date.Date) error); ok {
		r1 = rf(ctx, accountGroupIDs, dateFrom, dateTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateExpensesAndEarnings provides a mock function with given fields: ctx, accountGroupIDs, dateFrom, dateTo
func (_m *AccountRepository) CalculateExpensesAndEarnings(ctx context.Context, accountGroupIDs []uint32, dateFrom date.Date, dateTo date.Date) (map[uint32]float64, error) {
	ret := _m.Called(ctx, accountGroupIDs, dateFrom, dateTo)

	if len(ret) == 0 {
		panic("no return value specified for CalculateExpensesAndEarnings")
	}

	var r0 map[uint32]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, date.Date, date.Date) (map[uint32]float64, error)); ok {
		return rf(ctx, accountGroupIDs, dateFrom, dateTo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, date.Date, date.Date) map[uint32]float64); ok {
		r0 = rf(ctx, accountGroupIDs, dateFrom, dateTo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint32]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint32, date.Date, date.Date) error); ok {
		r1 = rf(ctx, accountGroupIDs, dateFrom, dateTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateRemainderAccounts provides a mock function with given fields: ctx, accountGroupIDs, dateTo
func (_m *AccountRepository) CalculateRemainderAccounts(ctx context.Context, accountGroupIDs []uint32, dateTo *date.Date) (map[uint32]float64, error) {
	ret := _m.Called(ctx, accountGroupIDs, dateTo)

	if len(ret) == 0 {
		panic("no return value specified for CalculateRemainderAccounts")
	}

	var r0 map[uint32]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, *date.Date) (map[uint32]float64, error)); ok {
		return rf(ctx, accountGroupIDs, dateTo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, *date.Date) map[uint32]float64); ok {
		r0 = rf(ctx, accountGroupIDs, dateTo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint32]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint32, *date.Date) error); ok {
		r1 = rf(ctx, accountGroupIDs, dateTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *AccountRepository) Create(_a0 context.Context, _a1 model.CreateReq) (uint32, uint32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint32
	var r1 uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateReq) (uint32, uint32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateReq) uint32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateReq) uint32); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.CreateReq) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateAccountGroup provides a mock function with given fields: _a0, _a1
func (_m *AccountRepository) CreateAccountGroup(_a0 context.Context, _a1 model.CreateAccountGroupReq) (uint32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountGroup")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateAccountGroupReq) (uint32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateAccountGroupReq) uint32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateAccountGroupReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *AccountRepository) Delete(ctx context.Context, id uint32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *AccountRepository) Get(_a0 context.Context, _a1 model.GetReq) ([]model.Account, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetReq) ([]model.Account, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetReq) []model.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountGroups provides a mock function with given fields: _a0, _a1
func (_m *AccountRepository) GetAccountGroups(_a0 context.Context, _a1 model.GetAccountGroupsReq) ([]model.AccountGroup, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountGroups")
	}

	var r0 []model.AccountGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAccountGroupsReq) ([]model.AccountGroup, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAccountGroupsReq) []model.AccountGroup); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetAccountGroupsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemainder provides a mock function with given fields: ctx, id
func (_m *AccountRepository) GetRemainder(ctx context.Context, id uint32) (float64, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRemainder")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (float64, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) float64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Switch provides a mock function with given fields: ctx, id1, id2
func (_m *AccountRepository) Switch(ctx context.Context, id1 uint32, id2 uint32) error {
	ret := _m.Called(ctx, id1, id2)

	if len(ret) == 0 {
		panic("no return value specified for Switch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, id1, id2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *AccountRepository) Update(_a0 context.Context, _a1 model.UpdateReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

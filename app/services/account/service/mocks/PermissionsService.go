// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	model "server/app/services/account/model"

	mock "github.com/stretchr/testify/mock"

	permissions "server/app/services/permissions"
)

// PermissionsService is an autogenerated mock type for the PermissionsService type
type PermissionsService struct {
	mock.Mock
}

// CheckPermissions provides a mock function with given fields: req, _a1
func (_m *PermissionsService) CheckPermissions(req model.UpdateReq, _a1 permissions.Permissions) error {
	ret := _m.Called(req, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UpdateReq, permissions.Permissions) error); ok {
		r0 = rf(req, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPermissions provides a mock function with given fields: account
func (_m *PermissionsService) GetPermissions(account model.Account) permissions.Permissions {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 permissions.Permissions
	if rf, ok := ret.Get(0).(func(model.Account) permissions.Permissions); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(permissions.Permissions)
	}

	return r0
}

// NewPermissionsService creates a new instance of PermissionsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionsService {
	mock := &PermissionsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

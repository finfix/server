// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	checker "server/app/services/generalRepository/checker"

	mock "github.com/stretchr/testify/mock"
)

// GeneralRepository is an autogenerated mock type for the GeneralRepository type
type GeneralRepository struct {
	mock.Mock
}

// CheckAccess provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *GeneralRepository) CheckAccess(_a0 context.Context, _a1 checker.CheckType, _a2 uint32, _a3 []uint32) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for CheckAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, checker.CheckType, uint32, []uint32) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAvailableAccountGroups provides a mock function with given fields: userID
func (_m *GeneralRepository) GetAvailableAccountGroups(userID uint32) []uint32 {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableAccountGroups")
	}

	var r0 []uint32
	if rf, ok := ret.Get(0).(func(uint32) []uint32); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}

	return r0
}

// GetCurrencies provides a mock function with given fields: _a0
func (_m *GeneralRepository) GetCurrencies(_a0 context.Context) (map[string]float64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencies")
	}

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]float64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]float64); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithinTransaction provides a mock function with given fields: ctx, callback
func (_m *GeneralRepository) WithinTransaction(ctx context.Context, callback func(context.Context) error) error {
	ret := _m.Called(ctx, callback)

	if len(ret) == 0 {
		panic("no return value specified for WithinTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGeneralRepository creates a new instance of GeneralRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeneralRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeneralRepository {
	mock := &GeneralRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

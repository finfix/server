// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	model "server/app/services/transaction/repository/model"

	mock "github.com/stretchr/testify/mock"

	transactionmodel "server/app/services/transaction/model"
)

// MockTransactionRepository is an autogenerated mock type for the TransactionRepository type
type MockTransactionRepository struct {
	mock.Mock
}

type MockTransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRepository) EXPECT() *MockTransactionRepository_Expecter {
	return &MockTransactionRepository_Expecter{mock: &_m.Mock}
}

// CreateTransaction provides a mock function with given fields: _a0, _a1
func (_m *MockTransactionRepository) CreateTransaction(_a0 context.Context, _a1 model.CreateTransactionReq) (uint32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateTransactionReq) (uint32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateTransactionReq) uint32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateTransactionReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type MockTransactionRepository_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.CreateTransactionReq
func (_e *MockTransactionRepository_Expecter) CreateTransaction(_a0 interface{}, _a1 interface{}) *MockTransactionRepository_CreateTransaction_Call {
	return &MockTransactionRepository_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", _a0, _a1)}
}

func (_c *MockTransactionRepository_CreateTransaction_Call) Run(run func(_a0 context.Context, _a1 model.CreateTransactionReq)) *MockTransactionRepository_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateTransactionReq))
	})
	return _c
}

func (_c *MockTransactionRepository_CreateTransaction_Call) Return(_a0 uint32, _a1 error) *MockTransactionRepository_CreateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_CreateTransaction_Call) RunAndReturn(run func(context.Context, model.CreateTransactionReq) (uint32, error)) *MockTransactionRepository_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTransaction provides a mock function with given fields: ctx, id, userID
func (_m *MockTransactionRepository) DeleteTransaction(ctx context.Context, id uint32, userID uint32) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_DeleteTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTransaction'
type MockTransactionRepository_DeleteTransaction_Call struct {
	*mock.Call
}

// DeleteTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint32
//   - userID uint32
func (_e *MockTransactionRepository_Expecter) DeleteTransaction(ctx interface{}, id interface{}, userID interface{}) *MockTransactionRepository_DeleteTransaction_Call {
	return &MockTransactionRepository_DeleteTransaction_Call{Call: _e.mock.On("DeleteTransaction", ctx, id, userID)}
}

func (_c *MockTransactionRepository_DeleteTransaction_Call) Run(run func(ctx context.Context, id uint32, userID uint32)) *MockTransactionRepository_DeleteTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(uint32))
	})
	return _c
}

func (_c *MockTransactionRepository_DeleteTransaction_Call) Return(_a0 error) *MockTransactionRepository_DeleteTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_DeleteTransaction_Call) RunAndReturn(run func(context.Context, uint32, uint32) error) *MockTransactionRepository_DeleteTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields: _a0, _a1
func (_m *MockTransactionRepository) GetTransactions(_a0 context.Context, _a1 transactionmodel.GetTransactionsReq) ([]transactionmodel.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []transactionmodel.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, transactionmodel.GetTransactionsReq) ([]transactionmodel.Transaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, transactionmodel.GetTransactionsReq) []transactionmodel.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactionmodel.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, transactionmodel.GetTransactionsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type MockTransactionRepository_GetTransactions_Call struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 transactionmodel.GetTransactionsReq
func (_e *MockTransactionRepository_Expecter) GetTransactions(_a0 interface{}, _a1 interface{}) *MockTransactionRepository_GetTransactions_Call {
	return &MockTransactionRepository_GetTransactions_Call{Call: _e.mock.On("GetTransactions", _a0, _a1)}
}

func (_c *MockTransactionRepository_GetTransactions_Call) Run(run func(_a0 context.Context, _a1 transactionmodel.GetTransactionsReq)) *MockTransactionRepository_GetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transactionmodel.GetTransactionsReq))
	})
	return _c
}

func (_c *MockTransactionRepository_GetTransactions_Call) Return(res []transactionmodel.Transaction, err error) *MockTransactionRepository_GetTransactions_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockTransactionRepository_GetTransactions_Call) RunAndReturn(run func(context.Context, transactionmodel.GetTransactionsReq) ([]transactionmodel.Transaction, error)) *MockTransactionRepository_GetTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransaction provides a mock function with given fields: _a0, _a1
func (_m *MockTransactionRepository) UpdateTransaction(_a0 context.Context, _a1 transactionmodel.UpdateTransactionReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transactionmodel.UpdateTransactionReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepository_UpdateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransaction'
type MockTransactionRepository_UpdateTransaction_Call struct {
	*mock.Call
}

// UpdateTransaction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 transactionmodel.UpdateTransactionReq
func (_e *MockTransactionRepository_Expecter) UpdateTransaction(_a0 interface{}, _a1 interface{}) *MockTransactionRepository_UpdateTransaction_Call {
	return &MockTransactionRepository_UpdateTransaction_Call{Call: _e.mock.On("UpdateTransaction", _a0, _a1)}
}

func (_c *MockTransactionRepository_UpdateTransaction_Call) Run(run func(_a0 context.Context, _a1 transactionmodel.UpdateTransactionReq)) *MockTransactionRepository_UpdateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transactionmodel.UpdateTransactionReq))
	})
	return _c
}

func (_c *MockTransactionRepository_UpdateTransaction_Call) Return(_a0 error) *MockTransactionRepository_UpdateTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepository_UpdateTransaction_Call) RunAndReturn(run func(context.Context, transactionmodel.UpdateTransactionReq) error) *MockTransactionRepository_UpdateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionRepository creates a new instance of MockTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepository {
	mock := &MockTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

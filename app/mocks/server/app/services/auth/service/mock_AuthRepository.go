// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	model "server/app/services/auth/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, token, timeExpiry, deviceID, userID
func (_m *MockAuthRepository) CreateSession(ctx context.Context, token string, timeExpiry time.Time, deviceID string, userID uint32) error {
	ret := _m.Called(ctx, token, timeExpiry, deviceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, string, uint32) error); ok {
		r0 = rf(ctx, token, timeExpiry, deviceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockAuthRepository_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - timeExpiry time.Time
//   - deviceID string
//   - userID uint32
func (_e *MockAuthRepository_Expecter) CreateSession(ctx interface{}, token interface{}, timeExpiry interface{}, deviceID interface{}, userID interface{}) *MockAuthRepository_CreateSession_Call {
	return &MockAuthRepository_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, token, timeExpiry, deviceID, userID)}
}

func (_c *MockAuthRepository_CreateSession_Call) Run(run func(ctx context.Context, token string, timeExpiry time.Time, deviceID string, userID uint32)) *MockAuthRepository_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(string), args[4].(uint32))
	})
	return _c
}

func (_c *MockAuthRepository_CreateSession_Call) Return(_a0 error) *MockAuthRepository_CreateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_CreateSession_Call) RunAndReturn(run func(context.Context, string, time.Time, string, uint32) error) *MockAuthRepository_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, userID, deviceID
func (_m *MockAuthRepository) DeleteSession(ctx context.Context, userID uint32, deviceID string) error {
	ret := _m.Called(ctx, userID, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) error); ok {
		r0 = rf(ctx, userID, deviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockAuthRepository_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint32
//   - deviceID string
func (_e *MockAuthRepository_Expecter) DeleteSession(ctx interface{}, userID interface{}, deviceID interface{}) *MockAuthRepository_DeleteSession_Call {
	return &MockAuthRepository_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, userID, deviceID)}
}

func (_c *MockAuthRepository_DeleteSession_Call) Run(run func(ctx context.Context, userID uint32, deviceID string)) *MockAuthRepository_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(string))
	})
	return _c
}

func (_c *MockAuthRepository_DeleteSession_Call) Return(_a0 error) *MockAuthRepository_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_DeleteSession_Call) RunAndReturn(run func(context.Context, uint32, string) error) *MockAuthRepository_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function with given fields: _a0, _a1
func (_m *MockAuthRepository) GetSession(_a0 context.Context, _a1 model.RefreshTokensReq) (model.Session, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshTokensReq) (model.Session, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshTokensReq) model.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RefreshTokensReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type MockAuthRepository_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.RefreshTokensReq
func (_e *MockAuthRepository_Expecter) GetSession(_a0 interface{}, _a1 interface{}) *MockAuthRepository_GetSession_Call {
	return &MockAuthRepository_GetSession_Call{Call: _e.mock.On("GetSession", _a0, _a1)}
}

func (_c *MockAuthRepository_GetSession_Call) Run(run func(_a0 context.Context, _a1 model.RefreshTokensReq)) *MockAuthRepository_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RefreshTokensReq))
	})
	return _c
}

func (_c *MockAuthRepository_GetSession_Call) Return(_a0 model.Session, _a1 error) *MockAuthRepository_GetSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_GetSession_Call) RunAndReturn(run func(context.Context, model.RefreshTokensReq) (model.Session, error)) *MockAuthRepository_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	model "server/internal/services/account/model"
)

// MockAccountService is an autogenerated mock type for the AccountService type
type MockAccountService struct {
	mock.Mock
}

// ChangeAccountRemainder provides a mock function with given fields: ctx, account, remainderToUpdate, userID
func (_m *MockAccountService) ChangeAccountRemainder(ctx context.Context, account model.Account, remainderToUpdate decimal.Decimal, userID uint32) (model.UpdateAccountRes, error) {
	ret := _m.Called(ctx, account, remainderToUpdate, userID)

	if len(ret) == 0 {
		panic("no return value specified for ChangeAccountRemainder")
	}

	var r0 model.UpdateAccountRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Account, decimal.Decimal, uint32) (model.UpdateAccountRes, error)); ok {
		return rf(ctx, account, remainderToUpdate, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Account, decimal.Decimal, uint32) model.UpdateAccountRes); ok {
		r0 = rf(ctx, account, remainderToUpdate, userID)
	} else {
		r0 = ret.Get(0).(model.UpdateAccountRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Account, decimal.Decimal, uint32) error); ok {
		r1 = rf(ctx, account, remainderToUpdate, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAccountService creates a new instance of MockAccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountService {
	mock := &MockAccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

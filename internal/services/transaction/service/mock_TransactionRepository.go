// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	model "server/internal/services/transaction/repository/model"

	mock "github.com/stretchr/testify/mock"

	transactionmodel "server/internal/services/transaction/model"
)

// MockTransactionRepository is an autogenerated mock type for the TransactionRepository type
type MockTransactionRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: _a0, _a1
func (_m *MockTransactionRepository) CreateTransaction(_a0 context.Context, _a1 model.CreateTransactionReq) (uint32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateTransactionReq) (uint32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateTransactionReq) uint32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateTransactionReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransaction provides a mock function with given fields: ctx, id, userID
func (_m *MockTransactionRepository) DeleteTransaction(ctx context.Context, id uint32, userID uint32) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransactions provides a mock function with given fields: _a0, _a1
func (_m *MockTransactionRepository) GetTransactions(_a0 context.Context, _a1 transactionmodel.GetTransactionsReq) ([]transactionmodel.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []transactionmodel.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, transactionmodel.GetTransactionsReq) ([]transactionmodel.Transaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, transactionmodel.GetTransactionsReq) []transactionmodel.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactionmodel.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, transactionmodel.GetTransactionsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransaction provides a mock function with given fields: _a0, _a1
func (_m *MockTransactionRepository) UpdateTransaction(_a0 context.Context, _a1 transactionmodel.UpdateTransactionReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transactionmodel.UpdateTransactionReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTransactionRepository creates a new instance of MockTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepository {
	mock := &MockTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

package service

import (
	"context"
	"fmt"

	settingsModel "server/internal/services/settings/model"
	"server/internal/services/settings/network"
	"server/pkg/log"
	"server/pkg/tgBot"
)

// UpdateCurrencies –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
func (s *Service) UpdateCurrencies(ctx context.Context, req settingsModel.UpdateCurrenciesReq) error {

	err := s.checkAdmin(ctx, req.Necessary.UserID)
	if err != nil {
		return err
	}

	const updateCurrenciesTemplate = "*üìà –ö—É—Ä—Å –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω*\n\nUSD: %v‚ÇΩ\nBTC: %v$"

	var tgMessage tgBot.SendMessageReq

	defer func() {
		err := s.tgBot.SendMessage(ctx, tgMessage)
		if err != nil {
			log.Error(ctx, err)
		}
	}()

	// –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
	rates, err := network.GetCurrencyRates(ctx, s.credentials.CurrencyProviderAPIKey)
	if err != nil {
		tgMessage.Message += fmt.Sprintf("–ù–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞\n\n%v", err.Error())
		return err
	}
	tgMessage.Message += "–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞\n"

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –ë–î
	if err = s.settingsRepository.UpdateCurrencies(ctx, rates); err != nil {
		tgMessage.Message += fmt.Sprintf("–ù–µ —Å–º–æ–≥–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n%v", err.Error())
		return err
	}

	tgMessage.Message = fmt.Sprintf(
		updateCurrenciesTemplate,
		getRate(rates, "USD", "RUB").Round(2), //nolint:gomnd
		getRate(rates, "BTC", "USD").Round(0),
	)

	return nil
}

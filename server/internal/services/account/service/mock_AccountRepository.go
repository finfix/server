// Code generated by mockery v2.42.2. DO NOT EDIT.

package service

import (
	context "context"
	accountmodel "server/internal/services/account/model"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"

	model "server/internal/services/account/repository/model"
)

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

// CalculateRemainderAccounts provides a mock function with given fields: _a0, _a1
func (_m *MockAccountRepository) CalculateRemainderAccounts(_a0 context.Context, _a1 model.CalculateRemaindersAccountsReq) (map[uint32]decimal.Decimal, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CalculateRemainderAccounts")
	}

	var r0 map[uint32]decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CalculateRemaindersAccountsReq) (map[uint32]decimal.Decimal, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CalculateRemaindersAccountsReq) map[uint32]decimal.Decimal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint32]decimal.Decimal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CalculateRemaindersAccountsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeSerialNumbers provides a mock function with given fields: ctx, accountGroupID, oldValue, newValue
func (_m *MockAccountRepository) ChangeSerialNumbers(ctx context.Context, accountGroupID uint32, oldValue uint32, newValue uint32) error {
	ret := _m.Called(ctx, accountGroupID, oldValue, newValue)

	if len(ret) == 0 {
		panic("no return value specified for ChangeSerialNumbers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) error); ok {
		r0 = rf(ctx, accountGroupID, oldValue, newValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckAccess provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockAccountRepository) CheckAccess(_a0 context.Context, _a1 []uint32, _a2 []uint32) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CheckAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, []uint32) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccount provides a mock function with given fields: _a0, _a1
func (_m *MockAccountRepository) CreateAccount(_a0 context.Context, _a1 model.CreateAccountReq) (uint32, uint32, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 uint32
	var r1 uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateAccountReq) (uint32, uint32, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateAccountReq) uint32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateAccountReq) uint32); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.CreateAccountReq) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *MockAccountRepository) DeleteAccount(ctx context.Context, id uint32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccounts provides a mock function with given fields: _a0, _a1
func (_m *MockAccountRepository) GetAccounts(_a0 context.Context, _a1 model.GetAccountsReq) ([]accountmodel.Account, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccounts")
	}

	var r0 []accountmodel.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAccountsReq) ([]accountmodel.Account, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAccountsReq) []accountmodel.Account); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]accountmodel.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetAccountsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: _a0, _a1
func (_m *MockAccountRepository) UpdateAccount(_a0 context.Context, _a1 map[uint32]model.UpdateAccountReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[uint32]model.UpdateAccountReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.46.2. DO NOT EDIT.

package endpoint

import (
	context "context"
	model "server/internal/services/auth/model"

	mock "github.com/stretchr/testify/mock"
)

// mockAuthService is an autogenerated mock type for the authService type
type mockAuthService struct {
	mock.Mock
}

// RefreshTokens provides a mock function with given fields: _a0, _a1
func (_m *mockAuthService) RefreshTokens(_a0 context.Context, _a1 model.RefreshTokensReq) (model.RefreshTokensRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokens")
	}

	var r0 model.RefreshTokensRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshTokensReq) (model.RefreshTokensRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshTokensReq) model.RefreshTokensRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.RefreshTokensRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RefreshTokensReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignIn provides a mock function with given fields: _a0, _a1
func (_m *mockAuthService) SignIn(_a0 context.Context, _a1 model.SignInReq) (model.AuthRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 model.AuthRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.SignInReq) (model.AuthRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.SignInReq) model.AuthRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.AuthRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.SignInReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignOut provides a mock function with given fields: _a0, _a1
func (_m *mockAuthService) SignOut(_a0 context.Context, _a1 model.SignOutReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SignOut")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.SignOutReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignUp provides a mock function with given fields: _a0, _a1
func (_m *mockAuthService) SignUp(_a0 context.Context, _a1 model.SignUpReq) (model.AuthRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 model.AuthRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.SignUpReq) (model.AuthRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.SignUpReq) model.AuthRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.AuthRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.SignUpReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockAuthService creates a new instance of mockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAuthService {
	mock := &mockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

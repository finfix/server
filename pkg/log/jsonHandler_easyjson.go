// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package log

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	model "server/pkg/log/model"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson65a741d4DecodeServerAppPkgLog(in *jlexer.Lexer, out *jsonLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "level":
			out.Level = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "stackTrace":
			if in.IsNull() {
				in.Skip()
				out.StackTrace = nil
			} else {
				in.Delim('[')
				if out.StackTrace == nil {
					if !in.IsDelim(']') {
						out.StackTrace = make([]string, 0, 4)
					} else {
						out.StackTrace = []string{}
					}
				} else {
					out.StackTrace = (out.StackTrace)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.StackTrace = append(out.StackTrace, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "params":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Params = make(map[string]string)
				} else {
					out.Params = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Params)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "systemInfo":
			easyjson65a741d4DecodeServerAppPkgLogModel(in, &out.SystemInfo)
		case "userInfo":
			if in.IsNull() {
				in.Skip()
				out.UserInfo = nil
			} else {
				if out.UserInfo == nil {
					out.UserInfo = new(model.UserInfo)
				}
				easyjson65a741d4DecodeServerAppPkgLogModel1(in, out.UserInfo)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65a741d4EncodeServerAppPkgLog(out *jwriter.Writer, in jsonLog) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix[1:])
		out.String(string(in.Level))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"stackTrace\":"
		out.RawString(prefix)
		if in.StackTrace == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.StackTrace {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.Params) != 0 {
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Params {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"systemInfo\":"
		out.RawString(prefix)
		easyjson65a741d4EncodeServerAppPkgLogModel(out, in.SystemInfo)
	}
	{
		const prefix string = ",\"userInfo\":"
		out.RawString(prefix)
		if in.UserInfo == nil {
			out.RawString("null")
		} else {
			easyjson65a741d4EncodeServerAppPkgLogModel1(out, *in.UserInfo)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v jsonLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65a741d4EncodeServerAppPkgLog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v jsonLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65a741d4EncodeServerAppPkgLog(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *jsonLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65a741d4DecodeServerAppPkgLog(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *jsonLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65a741d4DecodeServerAppPkgLog(l, v)
}
func easyjson65a741d4DecodeServerAppPkgLogModel1(in *jlexer.Lexer, out *model.UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userID":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(uint32)
				}
				*out.UserID = uint32(in.Uint32())
			}
		case "taskID":
			if in.IsNull() {
				in.Skip()
				out.TaskID = nil
			} else {
				if out.TaskID == nil {
					out.TaskID = new(string)
				}
				*out.TaskID = string(in.String())
			}
		case "deviceID":
			if in.IsNull() {
				in.Skip()
				out.DeviceID = nil
			} else {
				if out.DeviceID == nil {
					out.DeviceID = new(string)
				}
				*out.DeviceID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65a741d4EncodeServerAppPkgLogModel1(out *jwriter.Writer, in model.UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userID\":"
		out.RawString(prefix[1:])
		if in.UserID == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.UserID))
		}
	}
	{
		const prefix string = ",\"taskID\":"
		out.RawString(prefix)
		if in.TaskID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.TaskID))
		}
	}
	{
		const prefix string = ",\"deviceID\":"
		out.RawString(prefix)
		if in.DeviceID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DeviceID))
		}
	}
	out.RawByte('}')
}
func easyjson65a741d4DecodeServerAppPkgLogModel(in *jlexer.Lexer, out *model.SystemInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hostname":
			out.Hostname = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "build":
			out.Build = string(in.String())
		case "env":
			out.Env = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65a741d4EncodeServerAppPkgLogModel(out *jwriter.Writer, in model.SystemInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"build\":"
		out.RawString(prefix)
		out.String(string(in.Build))
	}
	{
		const prefix string = ",\"env\":"
		out.RawString(prefix)
		out.String(string(in.Env))
	}
	out.RawByte('}')
}

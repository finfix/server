// Code generated by mockery v2.42.2. DO NOT EDIT.

package sql

import (
	context "context"

	squirrel "github.com/Masterminds/squirrel"
	mock "github.com/stretchr/testify/mock"
)

// MockSQL is an autogenerated mock type for the SQL type
type MockSQL struct {
	mock.Mock
}

// Begin provides a mock function with given fields: _a0
func (_m *MockSQL) Begin(_a0 context.Context) (*Tx, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Tx, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Tx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *MockSQL) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: ctx, q
func (_m *MockSQL) Exec(ctx context.Context, q squirrel.Sqlizer) error {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) error); ok {
		r0 = rf(ctx, q)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecWithLastInsertID provides a mock function with given fields: ctx, q
func (_m *MockSQL) ExecWithLastInsertID(ctx context.Context, q squirrel.Sqlizer) (uint32, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for ExecWithLastInsertID")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) (uint32, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) uint32); ok {
		r0 = rf(ctx, q)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, squirrel.Sqlizer) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecWithRowsAffected provides a mock function with given fields: ctx, q
func (_m *MockSQL) ExecWithRowsAffected(ctx context.Context, q squirrel.Sqlizer) (uint32, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for ExecWithRowsAffected")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) (uint32, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) uint32); ok {
		r0 = rf(ctx, q)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, squirrel.Sqlizer) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, dest, q
func (_m *MockSQL) Get(ctx context.Context, dest interface{}, q squirrel.Sqlizer) error {
	ret := _m.Called(ctx, dest, q)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, squirrel.Sqlizer) error); ok {
		r0 = rf(ctx, dest, q)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *MockSQL) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Prepare provides a mock function with given fields: ctx, q
func (_m *MockSQL) Prepare(ctx context.Context, q squirrel.Sqlizer) (*Stmt, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *Stmt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) (*Stmt, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) *Stmt); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Stmt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, squirrel.Sqlizer) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: ctx, q
func (_m *MockSQL) Query(ctx context.Context, q squirrel.Sqlizer) (*Rows, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) (*Rows, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) *Rows); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, squirrel.Sqlizer) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryRow provides a mock function with given fields: ctx, q
func (_m *MockSQL) QueryRow(ctx context.Context, q squirrel.Sqlizer) (*Row, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *Row
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) (*Row, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, squirrel.Sqlizer) *Row); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Row)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, squirrel.Sqlizer) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Select provides a mock function with given fields: ctx, dest, q
func (_m *MockSQL) Select(ctx context.Context, dest interface{}, q squirrel.Sqlizer) error {
	ret := _m.Called(ctx, dest, q)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, squirrel.Sqlizer) error); ok {
		r0 = rf(ctx, dest, q)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsafe provides a mock function with given fields:
func (_m *MockSQL) Unsafe() *DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unsafe")
	}

	var r0 *DB
	if rf, ok := ret.Get(0).(func() *DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DB)
		}
	}

	return r0
}

// NewMockSQL creates a new instance of MockSQL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSQL(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSQL {
	mock := &MockSQL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

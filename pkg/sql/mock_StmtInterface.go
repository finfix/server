// Code generated by mockery v2.46.2. DO NOT EDIT.

package sql

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStmtInterface is an autogenerated mock type for the StmtInterface type
type MockStmtInterface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockStmtInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecWithAffectedRows provides a mock function with given fields: ctx, args
func (_m *MockStmtInterface) ExecWithAffectedRows(ctx context.Context, args ...any) (uint32, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecWithAffectedRows")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...any) (uint32, error)); ok {
		return rf(ctx, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...any) uint32); ok {
		r0 = rf(ctx, args...)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...any) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecWithLastInsertID provides a mock function with given fields: ctx, args
func (_m *MockStmtInterface) ExecWithLastInsertID(ctx context.Context, args ...any) (uint32, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecWithLastInsertID")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...any) (uint32, error)); ok {
		return rf(ctx, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...any) uint32); ok {
		r0 = rf(ctx, args...)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...any) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, dest, args
func (_m *MockStmtInterface) Get(ctx context.Context, dest any, args ...any) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, any, ...any) error); ok {
		r0 = rf(ctx, dest, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: ctx, args
func (_m *MockStmtInterface) Query(ctx context.Context, args ...any) (RowsInterface, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 RowsInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...any) (RowsInterface, error)); ok {
		return rf(ctx, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...any) RowsInterface); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RowsInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...any) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryRow provides a mock function with given fields: ctx, args
func (_m *MockStmtInterface) QueryRow(ctx context.Context, args ...any) RowInterface {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 RowInterface
	if rf, ok := ret.Get(0).(func(context.Context, ...any) RowInterface); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RowInterface)
		}
	}

	return r0
}

// Select provides a mock function with given fields: ctx, dest, args
func (_m *MockStmtInterface) Select(ctx context.Context, dest any, args ...any) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, any, ...any) error); ok {
		r0 = rf(ctx, dest, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStmtInterface creates a new instance of MockStmtInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStmtInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStmtInterface {
	mock := &MockStmtInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

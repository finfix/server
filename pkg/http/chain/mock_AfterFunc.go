// Code generated by mockery v2.46.2. DO NOT EDIT.

package chain

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockAfterFunc is an autogenerated mock type for the AfterFunc type
type MockAfterFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MockAfterFunc) Execute(_a0 context.Context, _a1 http.ResponseWriter) context.Context {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter) context.Context); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// NewMockAfterFunc creates a new instance of MockAfterFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAfterFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAfterFunc {
	mock := &MockAfterFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
